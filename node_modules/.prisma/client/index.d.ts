
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model User
 * 
 */
export type User = {
  id: number
  email: string
  password: string
}

/**
 * Model Category
 * 
 */
export type Category = {
  id: number
  name: string
}

/**
 * Model Term
 * 
 */
export type Term = {
  id: number
  teacherId: number
}

/**
 * Model Discipline
 * 
 */
export type Discipline = {
  id: number
  name: string
}

/**
 * Model teachers
 * 
 */
export type teachers = {
  id: number
  name: string
}

/**
 * Model TeacherDiscipline
 * 
 */
export type TeacherDiscipline = {
  id: number
  teacherId: number
  disciplineId: number
}

/**
 * Model Test
 * 
 */
export type Test = {
  id: number
  name: string
  pdfUrl: string
  categoryId: number
  teacherDisciplineId: number
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<GlobalReject>;

  /**
   * `prisma.term`: Exposes CRUD operations for the **Term** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Terms
    * const terms = await prisma.term.findMany()
    * ```
    */
  get term(): Prisma.TermDelegate<GlobalReject>;

  /**
   * `prisma.discipline`: Exposes CRUD operations for the **Discipline** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Disciplines
    * const disciplines = await prisma.discipline.findMany()
    * ```
    */
  get discipline(): Prisma.DisciplineDelegate<GlobalReject>;

  /**
   * `prisma.teachers`: Exposes CRUD operations for the **teachers** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Teachers
    * const teachers = await prisma.teachers.findMany()
    * ```
    */
  get teachers(): Prisma.teachersDelegate<GlobalReject>;

  /**
   * `prisma.teacherDiscipline`: Exposes CRUD operations for the **TeacherDiscipline** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TeacherDisciplines
    * const teacherDisciplines = await prisma.teacherDiscipline.findMany()
    * ```
    */
  get teacherDiscipline(): Prisma.TeacherDisciplineDelegate<GlobalReject>;

  /**
   * `prisma.test`: Exposes CRUD operations for the **Test** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tests
    * const tests = await prisma.test.findMany()
    * ```
    */
  get test(): Prisma.TestDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 3.12.0
   * Query Engine version: 22b822189f46ef0dc5c5b503368d1bee01213980
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    User: 'User',
    Category: 'Category',
    Term: 'Term',
    Discipline: 'Discipline',
    teachers: 'teachers',
    TeacherDiscipline: 'TeacherDiscipline',
    Test: 'Test'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CategoryCountOutputType
   */


  export type CategoryCountOutputType = {
    Test: number
  }

  export type CategoryCountOutputTypeSelect = {
    Test?: boolean
  }

  export type CategoryCountOutputTypeGetPayload<
    S extends boolean | null | undefined | CategoryCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? CategoryCountOutputType
    : S extends undefined
    ? never
    : S extends CategoryCountOutputTypeArgs
    ?'include' extends U
    ? CategoryCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof CategoryCountOutputType ? CategoryCountOutputType[P] : never
  } 
    : CategoryCountOutputType
  : CategoryCountOutputType




  // Custom InputTypes

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     * 
    **/
    select?: CategoryCountOutputTypeSelect | null
  }



  /**
   * Count Type DisciplineCountOutputType
   */


  export type DisciplineCountOutputType = {
    TeacherDiscipline: number
  }

  export type DisciplineCountOutputTypeSelect = {
    TeacherDiscipline?: boolean
  }

  export type DisciplineCountOutputTypeGetPayload<
    S extends boolean | null | undefined | DisciplineCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? DisciplineCountOutputType
    : S extends undefined
    ? never
    : S extends DisciplineCountOutputTypeArgs
    ?'include' extends U
    ? DisciplineCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof DisciplineCountOutputType ? DisciplineCountOutputType[P] : never
  } 
    : DisciplineCountOutputType
  : DisciplineCountOutputType




  // Custom InputTypes

  /**
   * DisciplineCountOutputType without action
   */
  export type DisciplineCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the DisciplineCountOutputType
     * 
    **/
    select?: DisciplineCountOutputTypeSelect | null
  }



  /**
   * Count Type TeachersCountOutputType
   */


  export type TeachersCountOutputType = {
    Term: number
    TeacherDiscipline: number
  }

  export type TeachersCountOutputTypeSelect = {
    Term?: boolean
    TeacherDiscipline?: boolean
  }

  export type TeachersCountOutputTypeGetPayload<
    S extends boolean | null | undefined | TeachersCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? TeachersCountOutputType
    : S extends undefined
    ? never
    : S extends TeachersCountOutputTypeArgs
    ?'include' extends U
    ? TeachersCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof TeachersCountOutputType ? TeachersCountOutputType[P] : never
  } 
    : TeachersCountOutputType
  : TeachersCountOutputType




  // Custom InputTypes

  /**
   * TeachersCountOutputType without action
   */
  export type TeachersCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TeachersCountOutputType
     * 
    **/
    select?: TeachersCountOutputTypeSelect | null
  }



  /**
   * Count Type TeacherDisciplineCountOutputType
   */


  export type TeacherDisciplineCountOutputType = {
    Test: number
  }

  export type TeacherDisciplineCountOutputTypeSelect = {
    Test?: boolean
  }

  export type TeacherDisciplineCountOutputTypeGetPayload<
    S extends boolean | null | undefined | TeacherDisciplineCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? TeacherDisciplineCountOutputType
    : S extends undefined
    ? never
    : S extends TeacherDisciplineCountOutputTypeArgs
    ?'include' extends U
    ? TeacherDisciplineCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof TeacherDisciplineCountOutputType ? TeacherDisciplineCountOutputType[P] : never
  } 
    : TeacherDisciplineCountOutputType
  : TeacherDisciplineCountOutputType




  // Custom InputTypes

  /**
   * TeacherDisciplineCountOutputType without action
   */
  export type TeacherDisciplineCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TeacherDisciplineCountOutputType
     * 
    **/
    select?: TeacherDisciplineCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    email: string
    password: string
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    email?: boolean
    password?: boolean
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof User ? User[P] : never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * The data needed to create a User.
     * 
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     * 
    **/
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * The data needed to update a User.
     * 
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     * 
    **/
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * The filter to search for the User to update in case it exists.
     * 
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     * 
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Filter which User to delete.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
  }



  /**
   * Model Category
   */


  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryAvgAggregateOutputType = {
    id: number | null
  }

  export type CategorySumAggregateOutputType = {
    id: number | null
  }

  export type CategoryMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type CategoryAvgAggregateInputType = {
    id?: true
  }

  export type CategorySumAggregateInputType = {
    id?: true
  }

  export type CategoryMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type CategoryAggregateArgs = {
    /**
     * Filter which Category to aggregate.
     * 
    **/
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     * 
    **/
    orderBy?: Enumerable<CategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs = {
    where?: CategoryWhereInput
    orderBy?: Enumerable<CategoryOrderByWithAggregationInput>
    by: Array<CategoryScalarFieldEnum>
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _avg?: CategoryAvgAggregateInputType
    _sum?: CategorySumAggregateInputType
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }


  export type CategoryGroupByOutputType = {
    id: number
    name: string
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type CategorySelect = {
    id?: boolean
    name?: boolean
    Test?: boolean | TestFindManyArgs
    _count?: boolean | CategoryCountOutputTypeArgs
  }

  export type CategoryInclude = {
    Test?: boolean | TestFindManyArgs
    _count?: boolean | CategoryCountOutputTypeArgs
  }

  export type CategoryGetPayload<
    S extends boolean | null | undefined | CategoryArgs,
    U = keyof S
      > = S extends true
        ? Category
    : S extends undefined
    ? never
    : S extends CategoryArgs | CategoryFindManyArgs
    ?'include' extends U
    ? Category  & {
    [P in TrueKeys<S['include']>]:
        P extends 'Test' ? Array < TestGetPayload<S['include'][P]>>  :
        P extends '_count' ? CategoryCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'Test' ? Array < TestGetPayload<S['select'][P]>>  :
        P extends '_count' ? CategoryCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Category ? Category[P] : never
  } 
    : Category
  : Category


  type CategoryCountArgs = Merge<
    Omit<CategoryFindManyArgs, 'select' | 'include'> & {
      select?: CategoryCountAggregateInputType | true
    }
  >

  export interface CategoryDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CategoryFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CategoryFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Category'> extends True ? CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>> : CheckSelect<T, Prisma__CategoryClient<Category | null >, Prisma__CategoryClient<CategoryGetPayload<T> | null >>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CategoryFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CategoryFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Category'> extends True ? CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>> : CheckSelect<T, Prisma__CategoryClient<Category | null >, Prisma__CategoryClient<CategoryGetPayload<T> | null >>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CategoryFindManyArgs>(
      args?: SelectSubset<T, CategoryFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Category>>, PrismaPromise<Array<CategoryGetPayload<T>>>>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
    **/
    create<T extends CategoryCreateArgs>(
      args: SelectSubset<T, CategoryCreateArgs>
    ): CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>>

    /**
     * Create many Categories.
     *     @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     *     @example
     *     // Create many Categories
     *     const category = await prisma.category.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CategoryCreateManyArgs>(
      args?: SelectSubset<T, CategoryCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
    **/
    delete<T extends CategoryDeleteArgs>(
      args: SelectSubset<T, CategoryDeleteArgs>
    ): CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CategoryUpdateArgs>(
      args: SelectSubset<T, CategoryUpdateArgs>
    ): CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CategoryDeleteManyArgs>(
      args?: SelectSubset<T, CategoryDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CategoryUpdateManyArgs>(
      args: SelectSubset<T, CategoryUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
    **/
    upsert<T extends CategoryUpsertArgs>(
      args: SelectSubset<T, CategoryUpsertArgs>
    ): CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>>

    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CategoryClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Test<T extends TestFindManyArgs = {}>(args?: Subset<T, TestFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Test>>, PrismaPromise<Array<TestGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Category findUnique
   */
  export type CategoryFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * Throw an Error if a Category can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Category to fetch.
     * 
    **/
    where: CategoryWhereUniqueInput
  }


  /**
   * Category findFirst
   */
  export type CategoryFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * Throw an Error if a Category can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Category to fetch.
     * 
    **/
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     * 
    **/
    orderBy?: Enumerable<CategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     * 
    **/
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     * 
    **/
    distinct?: Enumerable<CategoryScalarFieldEnum>
  }


  /**
   * Category findMany
   */
  export type CategoryFindManyArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * Filter, which Categories to fetch.
     * 
    **/
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     * 
    **/
    orderBy?: Enumerable<CategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     * 
    **/
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CategoryScalarFieldEnum>
  }


  /**
   * Category create
   */
  export type CategoryCreateArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * The data needed to create a Category.
     * 
    **/
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }


  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs = {
    /**
     * The data used to create many Categories.
     * 
    **/
    data: Enumerable<CategoryCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Category update
   */
  export type CategoryUpdateArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * The data needed to update a Category.
     * 
    **/
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     * 
    **/
    where: CategoryWhereUniqueInput
  }


  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs = {
    /**
     * The data used to update Categories.
     * 
    **/
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     * 
    **/
    where?: CategoryWhereInput
  }


  /**
   * Category upsert
   */
  export type CategoryUpsertArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * The filter to search for the Category to update in case it exists.
     * 
    **/
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     * 
    **/
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }


  /**
   * Category delete
   */
  export type CategoryDeleteArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * Filter which Category to delete.
     * 
    **/
    where: CategoryWhereUniqueInput
  }


  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs = {
    /**
     * Filter which Categories to delete
     * 
    **/
    where?: CategoryWhereInput
  }


  /**
   * Category without action
   */
  export type CategoryArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
  }



  /**
   * Model Term
   */


  export type AggregateTerm = {
    _count: TermCountAggregateOutputType | null
    _avg: TermAvgAggregateOutputType | null
    _sum: TermSumAggregateOutputType | null
    _min: TermMinAggregateOutputType | null
    _max: TermMaxAggregateOutputType | null
  }

  export type TermAvgAggregateOutputType = {
    id: number | null
    teacherId: number | null
  }

  export type TermSumAggregateOutputType = {
    id: number | null
    teacherId: number | null
  }

  export type TermMinAggregateOutputType = {
    id: number | null
    teacherId: number | null
  }

  export type TermMaxAggregateOutputType = {
    id: number | null
    teacherId: number | null
  }

  export type TermCountAggregateOutputType = {
    id: number
    teacherId: number
    _all: number
  }


  export type TermAvgAggregateInputType = {
    id?: true
    teacherId?: true
  }

  export type TermSumAggregateInputType = {
    id?: true
    teacherId?: true
  }

  export type TermMinAggregateInputType = {
    id?: true
    teacherId?: true
  }

  export type TermMaxAggregateInputType = {
    id?: true
    teacherId?: true
  }

  export type TermCountAggregateInputType = {
    id?: true
    teacherId?: true
    _all?: true
  }

  export type TermAggregateArgs = {
    /**
     * Filter which Term to aggregate.
     * 
    **/
    where?: TermWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Terms to fetch.
     * 
    **/
    orderBy?: Enumerable<TermOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: TermWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Terms from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Terms.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Terms
    **/
    _count?: true | TermCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TermAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TermSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TermMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TermMaxAggregateInputType
  }

  export type GetTermAggregateType<T extends TermAggregateArgs> = {
        [P in keyof T & keyof AggregateTerm]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTerm[P]>
      : GetScalarType<T[P], AggregateTerm[P]>
  }




  export type TermGroupByArgs = {
    where?: TermWhereInput
    orderBy?: Enumerable<TermOrderByWithAggregationInput>
    by: Array<TermScalarFieldEnum>
    having?: TermScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TermCountAggregateInputType | true
    _avg?: TermAvgAggregateInputType
    _sum?: TermSumAggregateInputType
    _min?: TermMinAggregateInputType
    _max?: TermMaxAggregateInputType
  }


  export type TermGroupByOutputType = {
    id: number
    teacherId: number
    _count: TermCountAggregateOutputType | null
    _avg: TermAvgAggregateOutputType | null
    _sum: TermSumAggregateOutputType | null
    _min: TermMinAggregateOutputType | null
    _max: TermMaxAggregateOutputType | null
  }

  type GetTermGroupByPayload<T extends TermGroupByArgs> = PrismaPromise<
    Array<
      PickArray<TermGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TermGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TermGroupByOutputType[P]>
            : GetScalarType<T[P], TermGroupByOutputType[P]>
        }
      >
    >


  export type TermSelect = {
    id?: boolean
    teacherId?: boolean
    teachers?: boolean | teachersArgs
  }

  export type TermInclude = {
    teachers?: boolean | teachersArgs
  }

  export type TermGetPayload<
    S extends boolean | null | undefined | TermArgs,
    U = keyof S
      > = S extends true
        ? Term
    : S extends undefined
    ? never
    : S extends TermArgs | TermFindManyArgs
    ?'include' extends U
    ? Term  & {
    [P in TrueKeys<S['include']>]:
        P extends 'teachers' ? teachersGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'teachers' ? teachersGetPayload<S['select'][P]> :  P extends keyof Term ? Term[P] : never
  } 
    : Term
  : Term


  type TermCountArgs = Merge<
    Omit<TermFindManyArgs, 'select' | 'include'> & {
      select?: TermCountAggregateInputType | true
    }
  >

  export interface TermDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Term that matches the filter.
     * @param {TermFindUniqueArgs} args - Arguments to find a Term
     * @example
     * // Get one Term
     * const term = await prisma.term.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TermFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TermFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Term'> extends True ? CheckSelect<T, Prisma__TermClient<Term>, Prisma__TermClient<TermGetPayload<T>>> : CheckSelect<T, Prisma__TermClient<Term | null >, Prisma__TermClient<TermGetPayload<T> | null >>

    /**
     * Find the first Term that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TermFindFirstArgs} args - Arguments to find a Term
     * @example
     * // Get one Term
     * const term = await prisma.term.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TermFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TermFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Term'> extends True ? CheckSelect<T, Prisma__TermClient<Term>, Prisma__TermClient<TermGetPayload<T>>> : CheckSelect<T, Prisma__TermClient<Term | null >, Prisma__TermClient<TermGetPayload<T> | null >>

    /**
     * Find zero or more Terms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TermFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Terms
     * const terms = await prisma.term.findMany()
     * 
     * // Get first 10 Terms
     * const terms = await prisma.term.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const termWithIdOnly = await prisma.term.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TermFindManyArgs>(
      args?: SelectSubset<T, TermFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Term>>, PrismaPromise<Array<TermGetPayload<T>>>>

    /**
     * Create a Term.
     * @param {TermCreateArgs} args - Arguments to create a Term.
     * @example
     * // Create one Term
     * const Term = await prisma.term.create({
     *   data: {
     *     // ... data to create a Term
     *   }
     * })
     * 
    **/
    create<T extends TermCreateArgs>(
      args: SelectSubset<T, TermCreateArgs>
    ): CheckSelect<T, Prisma__TermClient<Term>, Prisma__TermClient<TermGetPayload<T>>>

    /**
     * Create many Terms.
     *     @param {TermCreateManyArgs} args - Arguments to create many Terms.
     *     @example
     *     // Create many Terms
     *     const term = await prisma.term.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TermCreateManyArgs>(
      args?: SelectSubset<T, TermCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Term.
     * @param {TermDeleteArgs} args - Arguments to delete one Term.
     * @example
     * // Delete one Term
     * const Term = await prisma.term.delete({
     *   where: {
     *     // ... filter to delete one Term
     *   }
     * })
     * 
    **/
    delete<T extends TermDeleteArgs>(
      args: SelectSubset<T, TermDeleteArgs>
    ): CheckSelect<T, Prisma__TermClient<Term>, Prisma__TermClient<TermGetPayload<T>>>

    /**
     * Update one Term.
     * @param {TermUpdateArgs} args - Arguments to update one Term.
     * @example
     * // Update one Term
     * const term = await prisma.term.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TermUpdateArgs>(
      args: SelectSubset<T, TermUpdateArgs>
    ): CheckSelect<T, Prisma__TermClient<Term>, Prisma__TermClient<TermGetPayload<T>>>

    /**
     * Delete zero or more Terms.
     * @param {TermDeleteManyArgs} args - Arguments to filter Terms to delete.
     * @example
     * // Delete a few Terms
     * const { count } = await prisma.term.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TermDeleteManyArgs>(
      args?: SelectSubset<T, TermDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Terms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TermUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Terms
     * const term = await prisma.term.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TermUpdateManyArgs>(
      args: SelectSubset<T, TermUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Term.
     * @param {TermUpsertArgs} args - Arguments to update or create a Term.
     * @example
     * // Update or create a Term
     * const term = await prisma.term.upsert({
     *   create: {
     *     // ... data to create a Term
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Term we want to update
     *   }
     * })
    **/
    upsert<T extends TermUpsertArgs>(
      args: SelectSubset<T, TermUpsertArgs>
    ): CheckSelect<T, Prisma__TermClient<Term>, Prisma__TermClient<TermGetPayload<T>>>

    /**
     * Count the number of Terms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TermCountArgs} args - Arguments to filter Terms to count.
     * @example
     * // Count the number of Terms
     * const count = await prisma.term.count({
     *   where: {
     *     // ... the filter for the Terms we want to count
     *   }
     * })
    **/
    count<T extends TermCountArgs>(
      args?: Subset<T, TermCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TermCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Term.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TermAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TermAggregateArgs>(args: Subset<T, TermAggregateArgs>): PrismaPromise<GetTermAggregateType<T>>

    /**
     * Group by Term.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TermGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TermGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TermGroupByArgs['orderBy'] }
        : { orderBy?: TermGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TermGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTermGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Term.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TermClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    teachers<T extends teachersArgs = {}>(args?: Subset<T, teachersArgs>): CheckSelect<T, Prisma__teachersClient<teachers | null >, Prisma__teachersClient<teachersGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Term findUnique
   */
  export type TermFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Term
     * 
    **/
    select?: TermSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TermInclude | null
    /**
     * Throw an Error if a Term can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Term to fetch.
     * 
    **/
    where: TermWhereUniqueInput
  }


  /**
   * Term findFirst
   */
  export type TermFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Term
     * 
    **/
    select?: TermSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TermInclude | null
    /**
     * Throw an Error if a Term can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Term to fetch.
     * 
    **/
    where?: TermWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Terms to fetch.
     * 
    **/
    orderBy?: Enumerable<TermOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Terms.
     * 
    **/
    cursor?: TermWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Terms from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Terms.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Terms.
     * 
    **/
    distinct?: Enumerable<TermScalarFieldEnum>
  }


  /**
   * Term findMany
   */
  export type TermFindManyArgs = {
    /**
     * Select specific fields to fetch from the Term
     * 
    **/
    select?: TermSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TermInclude | null
    /**
     * Filter, which Terms to fetch.
     * 
    **/
    where?: TermWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Terms to fetch.
     * 
    **/
    orderBy?: Enumerable<TermOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Terms.
     * 
    **/
    cursor?: TermWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Terms from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Terms.
     * 
    **/
    skip?: number
    distinct?: Enumerable<TermScalarFieldEnum>
  }


  /**
   * Term create
   */
  export type TermCreateArgs = {
    /**
     * Select specific fields to fetch from the Term
     * 
    **/
    select?: TermSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TermInclude | null
    /**
     * The data needed to create a Term.
     * 
    **/
    data: XOR<TermCreateInput, TermUncheckedCreateInput>
  }


  /**
   * Term createMany
   */
  export type TermCreateManyArgs = {
    /**
     * The data used to create many Terms.
     * 
    **/
    data: Enumerable<TermCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Term update
   */
  export type TermUpdateArgs = {
    /**
     * Select specific fields to fetch from the Term
     * 
    **/
    select?: TermSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TermInclude | null
    /**
     * The data needed to update a Term.
     * 
    **/
    data: XOR<TermUpdateInput, TermUncheckedUpdateInput>
    /**
     * Choose, which Term to update.
     * 
    **/
    where: TermWhereUniqueInput
  }


  /**
   * Term updateMany
   */
  export type TermUpdateManyArgs = {
    /**
     * The data used to update Terms.
     * 
    **/
    data: XOR<TermUpdateManyMutationInput, TermUncheckedUpdateManyInput>
    /**
     * Filter which Terms to update
     * 
    **/
    where?: TermWhereInput
  }


  /**
   * Term upsert
   */
  export type TermUpsertArgs = {
    /**
     * Select specific fields to fetch from the Term
     * 
    **/
    select?: TermSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TermInclude | null
    /**
     * The filter to search for the Term to update in case it exists.
     * 
    **/
    where: TermWhereUniqueInput
    /**
     * In case the Term found by the `where` argument doesn't exist, create a new Term with this data.
     * 
    **/
    create: XOR<TermCreateInput, TermUncheckedCreateInput>
    /**
     * In case the Term was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<TermUpdateInput, TermUncheckedUpdateInput>
  }


  /**
   * Term delete
   */
  export type TermDeleteArgs = {
    /**
     * Select specific fields to fetch from the Term
     * 
    **/
    select?: TermSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TermInclude | null
    /**
     * Filter which Term to delete.
     * 
    **/
    where: TermWhereUniqueInput
  }


  /**
   * Term deleteMany
   */
  export type TermDeleteManyArgs = {
    /**
     * Filter which Terms to delete
     * 
    **/
    where?: TermWhereInput
  }


  /**
   * Term without action
   */
  export type TermArgs = {
    /**
     * Select specific fields to fetch from the Term
     * 
    **/
    select?: TermSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TermInclude | null
  }



  /**
   * Model Discipline
   */


  export type AggregateDiscipline = {
    _count: DisciplineCountAggregateOutputType | null
    _avg: DisciplineAvgAggregateOutputType | null
    _sum: DisciplineSumAggregateOutputType | null
    _min: DisciplineMinAggregateOutputType | null
    _max: DisciplineMaxAggregateOutputType | null
  }

  export type DisciplineAvgAggregateOutputType = {
    id: number | null
  }

  export type DisciplineSumAggregateOutputType = {
    id: number | null
  }

  export type DisciplineMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type DisciplineMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type DisciplineCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type DisciplineAvgAggregateInputType = {
    id?: true
  }

  export type DisciplineSumAggregateInputType = {
    id?: true
  }

  export type DisciplineMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type DisciplineMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type DisciplineCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type DisciplineAggregateArgs = {
    /**
     * Filter which Discipline to aggregate.
     * 
    **/
    where?: DisciplineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Disciplines to fetch.
     * 
    **/
    orderBy?: Enumerable<DisciplineOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: DisciplineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Disciplines from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Disciplines.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Disciplines
    **/
    _count?: true | DisciplineCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DisciplineAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DisciplineSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DisciplineMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DisciplineMaxAggregateInputType
  }

  export type GetDisciplineAggregateType<T extends DisciplineAggregateArgs> = {
        [P in keyof T & keyof AggregateDiscipline]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDiscipline[P]>
      : GetScalarType<T[P], AggregateDiscipline[P]>
  }




  export type DisciplineGroupByArgs = {
    where?: DisciplineWhereInput
    orderBy?: Enumerable<DisciplineOrderByWithAggregationInput>
    by: Array<DisciplineScalarFieldEnum>
    having?: DisciplineScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DisciplineCountAggregateInputType | true
    _avg?: DisciplineAvgAggregateInputType
    _sum?: DisciplineSumAggregateInputType
    _min?: DisciplineMinAggregateInputType
    _max?: DisciplineMaxAggregateInputType
  }


  export type DisciplineGroupByOutputType = {
    id: number
    name: string
    _count: DisciplineCountAggregateOutputType | null
    _avg: DisciplineAvgAggregateOutputType | null
    _sum: DisciplineSumAggregateOutputType | null
    _min: DisciplineMinAggregateOutputType | null
    _max: DisciplineMaxAggregateOutputType | null
  }

  type GetDisciplineGroupByPayload<T extends DisciplineGroupByArgs> = PrismaPromise<
    Array<
      PickArray<DisciplineGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DisciplineGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DisciplineGroupByOutputType[P]>
            : GetScalarType<T[P], DisciplineGroupByOutputType[P]>
        }
      >
    >


  export type DisciplineSelect = {
    id?: boolean
    name?: boolean
    TeacherDiscipline?: boolean | TeacherDisciplineFindManyArgs
    _count?: boolean | DisciplineCountOutputTypeArgs
  }

  export type DisciplineInclude = {
    TeacherDiscipline?: boolean | TeacherDisciplineFindManyArgs
    _count?: boolean | DisciplineCountOutputTypeArgs
  }

  export type DisciplineGetPayload<
    S extends boolean | null | undefined | DisciplineArgs,
    U = keyof S
      > = S extends true
        ? Discipline
    : S extends undefined
    ? never
    : S extends DisciplineArgs | DisciplineFindManyArgs
    ?'include' extends U
    ? Discipline  & {
    [P in TrueKeys<S['include']>]:
        P extends 'TeacherDiscipline' ? Array < TeacherDisciplineGetPayload<S['include'][P]>>  :
        P extends '_count' ? DisciplineCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'TeacherDiscipline' ? Array < TeacherDisciplineGetPayload<S['select'][P]>>  :
        P extends '_count' ? DisciplineCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Discipline ? Discipline[P] : never
  } 
    : Discipline
  : Discipline


  type DisciplineCountArgs = Merge<
    Omit<DisciplineFindManyArgs, 'select' | 'include'> & {
      select?: DisciplineCountAggregateInputType | true
    }
  >

  export interface DisciplineDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Discipline that matches the filter.
     * @param {DisciplineFindUniqueArgs} args - Arguments to find a Discipline
     * @example
     * // Get one Discipline
     * const discipline = await prisma.discipline.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DisciplineFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, DisciplineFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Discipline'> extends True ? CheckSelect<T, Prisma__DisciplineClient<Discipline>, Prisma__DisciplineClient<DisciplineGetPayload<T>>> : CheckSelect<T, Prisma__DisciplineClient<Discipline | null >, Prisma__DisciplineClient<DisciplineGetPayload<T> | null >>

    /**
     * Find the first Discipline that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisciplineFindFirstArgs} args - Arguments to find a Discipline
     * @example
     * // Get one Discipline
     * const discipline = await prisma.discipline.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DisciplineFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, DisciplineFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Discipline'> extends True ? CheckSelect<T, Prisma__DisciplineClient<Discipline>, Prisma__DisciplineClient<DisciplineGetPayload<T>>> : CheckSelect<T, Prisma__DisciplineClient<Discipline | null >, Prisma__DisciplineClient<DisciplineGetPayload<T> | null >>

    /**
     * Find zero or more Disciplines that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisciplineFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Disciplines
     * const disciplines = await prisma.discipline.findMany()
     * 
     * // Get first 10 Disciplines
     * const disciplines = await prisma.discipline.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const disciplineWithIdOnly = await prisma.discipline.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DisciplineFindManyArgs>(
      args?: SelectSubset<T, DisciplineFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Discipline>>, PrismaPromise<Array<DisciplineGetPayload<T>>>>

    /**
     * Create a Discipline.
     * @param {DisciplineCreateArgs} args - Arguments to create a Discipline.
     * @example
     * // Create one Discipline
     * const Discipline = await prisma.discipline.create({
     *   data: {
     *     // ... data to create a Discipline
     *   }
     * })
     * 
    **/
    create<T extends DisciplineCreateArgs>(
      args: SelectSubset<T, DisciplineCreateArgs>
    ): CheckSelect<T, Prisma__DisciplineClient<Discipline>, Prisma__DisciplineClient<DisciplineGetPayload<T>>>

    /**
     * Create many Disciplines.
     *     @param {DisciplineCreateManyArgs} args - Arguments to create many Disciplines.
     *     @example
     *     // Create many Disciplines
     *     const discipline = await prisma.discipline.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DisciplineCreateManyArgs>(
      args?: SelectSubset<T, DisciplineCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Discipline.
     * @param {DisciplineDeleteArgs} args - Arguments to delete one Discipline.
     * @example
     * // Delete one Discipline
     * const Discipline = await prisma.discipline.delete({
     *   where: {
     *     // ... filter to delete one Discipline
     *   }
     * })
     * 
    **/
    delete<T extends DisciplineDeleteArgs>(
      args: SelectSubset<T, DisciplineDeleteArgs>
    ): CheckSelect<T, Prisma__DisciplineClient<Discipline>, Prisma__DisciplineClient<DisciplineGetPayload<T>>>

    /**
     * Update one Discipline.
     * @param {DisciplineUpdateArgs} args - Arguments to update one Discipline.
     * @example
     * // Update one Discipline
     * const discipline = await prisma.discipline.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DisciplineUpdateArgs>(
      args: SelectSubset<T, DisciplineUpdateArgs>
    ): CheckSelect<T, Prisma__DisciplineClient<Discipline>, Prisma__DisciplineClient<DisciplineGetPayload<T>>>

    /**
     * Delete zero or more Disciplines.
     * @param {DisciplineDeleteManyArgs} args - Arguments to filter Disciplines to delete.
     * @example
     * // Delete a few Disciplines
     * const { count } = await prisma.discipline.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DisciplineDeleteManyArgs>(
      args?: SelectSubset<T, DisciplineDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Disciplines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisciplineUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Disciplines
     * const discipline = await prisma.discipline.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DisciplineUpdateManyArgs>(
      args: SelectSubset<T, DisciplineUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Discipline.
     * @param {DisciplineUpsertArgs} args - Arguments to update or create a Discipline.
     * @example
     * // Update or create a Discipline
     * const discipline = await prisma.discipline.upsert({
     *   create: {
     *     // ... data to create a Discipline
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Discipline we want to update
     *   }
     * })
    **/
    upsert<T extends DisciplineUpsertArgs>(
      args: SelectSubset<T, DisciplineUpsertArgs>
    ): CheckSelect<T, Prisma__DisciplineClient<Discipline>, Prisma__DisciplineClient<DisciplineGetPayload<T>>>

    /**
     * Count the number of Disciplines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisciplineCountArgs} args - Arguments to filter Disciplines to count.
     * @example
     * // Count the number of Disciplines
     * const count = await prisma.discipline.count({
     *   where: {
     *     // ... the filter for the Disciplines we want to count
     *   }
     * })
    **/
    count<T extends DisciplineCountArgs>(
      args?: Subset<T, DisciplineCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DisciplineCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Discipline.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisciplineAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DisciplineAggregateArgs>(args: Subset<T, DisciplineAggregateArgs>): PrismaPromise<GetDisciplineAggregateType<T>>

    /**
     * Group by Discipline.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisciplineGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DisciplineGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DisciplineGroupByArgs['orderBy'] }
        : { orderBy?: DisciplineGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DisciplineGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDisciplineGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Discipline.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__DisciplineClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    TeacherDiscipline<T extends TeacherDisciplineFindManyArgs = {}>(args?: Subset<T, TeacherDisciplineFindManyArgs>): CheckSelect<T, PrismaPromise<Array<TeacherDiscipline>>, PrismaPromise<Array<TeacherDisciplineGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Discipline findUnique
   */
  export type DisciplineFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Discipline
     * 
    **/
    select?: DisciplineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DisciplineInclude | null
    /**
     * Throw an Error if a Discipline can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Discipline to fetch.
     * 
    **/
    where: DisciplineWhereUniqueInput
  }


  /**
   * Discipline findFirst
   */
  export type DisciplineFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Discipline
     * 
    **/
    select?: DisciplineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DisciplineInclude | null
    /**
     * Throw an Error if a Discipline can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Discipline to fetch.
     * 
    **/
    where?: DisciplineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Disciplines to fetch.
     * 
    **/
    orderBy?: Enumerable<DisciplineOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Disciplines.
     * 
    **/
    cursor?: DisciplineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Disciplines from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Disciplines.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Disciplines.
     * 
    **/
    distinct?: Enumerable<DisciplineScalarFieldEnum>
  }


  /**
   * Discipline findMany
   */
  export type DisciplineFindManyArgs = {
    /**
     * Select specific fields to fetch from the Discipline
     * 
    **/
    select?: DisciplineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DisciplineInclude | null
    /**
     * Filter, which Disciplines to fetch.
     * 
    **/
    where?: DisciplineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Disciplines to fetch.
     * 
    **/
    orderBy?: Enumerable<DisciplineOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Disciplines.
     * 
    **/
    cursor?: DisciplineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Disciplines from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Disciplines.
     * 
    **/
    skip?: number
    distinct?: Enumerable<DisciplineScalarFieldEnum>
  }


  /**
   * Discipline create
   */
  export type DisciplineCreateArgs = {
    /**
     * Select specific fields to fetch from the Discipline
     * 
    **/
    select?: DisciplineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DisciplineInclude | null
    /**
     * The data needed to create a Discipline.
     * 
    **/
    data: XOR<DisciplineCreateInput, DisciplineUncheckedCreateInput>
  }


  /**
   * Discipline createMany
   */
  export type DisciplineCreateManyArgs = {
    /**
     * The data used to create many Disciplines.
     * 
    **/
    data: Enumerable<DisciplineCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Discipline update
   */
  export type DisciplineUpdateArgs = {
    /**
     * Select specific fields to fetch from the Discipline
     * 
    **/
    select?: DisciplineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DisciplineInclude | null
    /**
     * The data needed to update a Discipline.
     * 
    **/
    data: XOR<DisciplineUpdateInput, DisciplineUncheckedUpdateInput>
    /**
     * Choose, which Discipline to update.
     * 
    **/
    where: DisciplineWhereUniqueInput
  }


  /**
   * Discipline updateMany
   */
  export type DisciplineUpdateManyArgs = {
    /**
     * The data used to update Disciplines.
     * 
    **/
    data: XOR<DisciplineUpdateManyMutationInput, DisciplineUncheckedUpdateManyInput>
    /**
     * Filter which Disciplines to update
     * 
    **/
    where?: DisciplineWhereInput
  }


  /**
   * Discipline upsert
   */
  export type DisciplineUpsertArgs = {
    /**
     * Select specific fields to fetch from the Discipline
     * 
    **/
    select?: DisciplineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DisciplineInclude | null
    /**
     * The filter to search for the Discipline to update in case it exists.
     * 
    **/
    where: DisciplineWhereUniqueInput
    /**
     * In case the Discipline found by the `where` argument doesn't exist, create a new Discipline with this data.
     * 
    **/
    create: XOR<DisciplineCreateInput, DisciplineUncheckedCreateInput>
    /**
     * In case the Discipline was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<DisciplineUpdateInput, DisciplineUncheckedUpdateInput>
  }


  /**
   * Discipline delete
   */
  export type DisciplineDeleteArgs = {
    /**
     * Select specific fields to fetch from the Discipline
     * 
    **/
    select?: DisciplineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DisciplineInclude | null
    /**
     * Filter which Discipline to delete.
     * 
    **/
    where: DisciplineWhereUniqueInput
  }


  /**
   * Discipline deleteMany
   */
  export type DisciplineDeleteManyArgs = {
    /**
     * Filter which Disciplines to delete
     * 
    **/
    where?: DisciplineWhereInput
  }


  /**
   * Discipline without action
   */
  export type DisciplineArgs = {
    /**
     * Select specific fields to fetch from the Discipline
     * 
    **/
    select?: DisciplineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DisciplineInclude | null
  }



  /**
   * Model teachers
   */


  export type AggregateTeachers = {
    _count: TeachersCountAggregateOutputType | null
    _avg: TeachersAvgAggregateOutputType | null
    _sum: TeachersSumAggregateOutputType | null
    _min: TeachersMinAggregateOutputType | null
    _max: TeachersMaxAggregateOutputType | null
  }

  export type TeachersAvgAggregateOutputType = {
    id: number | null
  }

  export type TeachersSumAggregateOutputType = {
    id: number | null
  }

  export type TeachersMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type TeachersMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type TeachersCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type TeachersAvgAggregateInputType = {
    id?: true
  }

  export type TeachersSumAggregateInputType = {
    id?: true
  }

  export type TeachersMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type TeachersMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type TeachersCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type TeachersAggregateArgs = {
    /**
     * Filter which teachers to aggregate.
     * 
    **/
    where?: teachersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of teachers to fetch.
     * 
    **/
    orderBy?: Enumerable<teachersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: teachersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` teachers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` teachers.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned teachers
    **/
    _count?: true | TeachersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TeachersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TeachersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeachersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeachersMaxAggregateInputType
  }

  export type GetTeachersAggregateType<T extends TeachersAggregateArgs> = {
        [P in keyof T & keyof AggregateTeachers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeachers[P]>
      : GetScalarType<T[P], AggregateTeachers[P]>
  }




  export type TeachersGroupByArgs = {
    where?: teachersWhereInput
    orderBy?: Enumerable<teachersOrderByWithAggregationInput>
    by: Array<TeachersScalarFieldEnum>
    having?: teachersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeachersCountAggregateInputType | true
    _avg?: TeachersAvgAggregateInputType
    _sum?: TeachersSumAggregateInputType
    _min?: TeachersMinAggregateInputType
    _max?: TeachersMaxAggregateInputType
  }


  export type TeachersGroupByOutputType = {
    id: number
    name: string
    _count: TeachersCountAggregateOutputType | null
    _avg: TeachersAvgAggregateOutputType | null
    _sum: TeachersSumAggregateOutputType | null
    _min: TeachersMinAggregateOutputType | null
    _max: TeachersMaxAggregateOutputType | null
  }

  type GetTeachersGroupByPayload<T extends TeachersGroupByArgs> = PrismaPromise<
    Array<
      PickArray<TeachersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeachersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeachersGroupByOutputType[P]>
            : GetScalarType<T[P], TeachersGroupByOutputType[P]>
        }
      >
    >


  export type teachersSelect = {
    id?: boolean
    name?: boolean
    Term?: boolean | TermFindManyArgs
    TeacherDiscipline?: boolean | TeacherDisciplineFindManyArgs
    _count?: boolean | TeachersCountOutputTypeArgs
  }

  export type teachersInclude = {
    Term?: boolean | TermFindManyArgs
    TeacherDiscipline?: boolean | TeacherDisciplineFindManyArgs
    _count?: boolean | TeachersCountOutputTypeArgs
  }

  export type teachersGetPayload<
    S extends boolean | null | undefined | teachersArgs,
    U = keyof S
      > = S extends true
        ? teachers
    : S extends undefined
    ? never
    : S extends teachersArgs | teachersFindManyArgs
    ?'include' extends U
    ? teachers  & {
    [P in TrueKeys<S['include']>]:
        P extends 'Term' ? Array < TermGetPayload<S['include'][P]>>  :
        P extends 'TeacherDiscipline' ? Array < TeacherDisciplineGetPayload<S['include'][P]>>  :
        P extends '_count' ? TeachersCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'Term' ? Array < TermGetPayload<S['select'][P]>>  :
        P extends 'TeacherDiscipline' ? Array < TeacherDisciplineGetPayload<S['select'][P]>>  :
        P extends '_count' ? TeachersCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof teachers ? teachers[P] : never
  } 
    : teachers
  : teachers


  type teachersCountArgs = Merge<
    Omit<teachersFindManyArgs, 'select' | 'include'> & {
      select?: TeachersCountAggregateInputType | true
    }
  >

  export interface teachersDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Teachers that matches the filter.
     * @param {teachersFindUniqueArgs} args - Arguments to find a Teachers
     * @example
     * // Get one Teachers
     * const teachers = await prisma.teachers.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends teachersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, teachersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'teachers'> extends True ? CheckSelect<T, Prisma__teachersClient<teachers>, Prisma__teachersClient<teachersGetPayload<T>>> : CheckSelect<T, Prisma__teachersClient<teachers | null >, Prisma__teachersClient<teachersGetPayload<T> | null >>

    /**
     * Find the first Teachers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {teachersFindFirstArgs} args - Arguments to find a Teachers
     * @example
     * // Get one Teachers
     * const teachers = await prisma.teachers.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends teachersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, teachersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'teachers'> extends True ? CheckSelect<T, Prisma__teachersClient<teachers>, Prisma__teachersClient<teachersGetPayload<T>>> : CheckSelect<T, Prisma__teachersClient<teachers | null >, Prisma__teachersClient<teachersGetPayload<T> | null >>

    /**
     * Find zero or more Teachers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {teachersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Teachers
     * const teachers = await prisma.teachers.findMany()
     * 
     * // Get first 10 Teachers
     * const teachers = await prisma.teachers.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teachersWithIdOnly = await prisma.teachers.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends teachersFindManyArgs>(
      args?: SelectSubset<T, teachersFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<teachers>>, PrismaPromise<Array<teachersGetPayload<T>>>>

    /**
     * Create a Teachers.
     * @param {teachersCreateArgs} args - Arguments to create a Teachers.
     * @example
     * // Create one Teachers
     * const Teachers = await prisma.teachers.create({
     *   data: {
     *     // ... data to create a Teachers
     *   }
     * })
     * 
    **/
    create<T extends teachersCreateArgs>(
      args: SelectSubset<T, teachersCreateArgs>
    ): CheckSelect<T, Prisma__teachersClient<teachers>, Prisma__teachersClient<teachersGetPayload<T>>>

    /**
     * Create many Teachers.
     *     @param {teachersCreateManyArgs} args - Arguments to create many Teachers.
     *     @example
     *     // Create many Teachers
     *     const teachers = await prisma.teachers.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends teachersCreateManyArgs>(
      args?: SelectSubset<T, teachersCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Teachers.
     * @param {teachersDeleteArgs} args - Arguments to delete one Teachers.
     * @example
     * // Delete one Teachers
     * const Teachers = await prisma.teachers.delete({
     *   where: {
     *     // ... filter to delete one Teachers
     *   }
     * })
     * 
    **/
    delete<T extends teachersDeleteArgs>(
      args: SelectSubset<T, teachersDeleteArgs>
    ): CheckSelect<T, Prisma__teachersClient<teachers>, Prisma__teachersClient<teachersGetPayload<T>>>

    /**
     * Update one Teachers.
     * @param {teachersUpdateArgs} args - Arguments to update one Teachers.
     * @example
     * // Update one Teachers
     * const teachers = await prisma.teachers.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends teachersUpdateArgs>(
      args: SelectSubset<T, teachersUpdateArgs>
    ): CheckSelect<T, Prisma__teachersClient<teachers>, Prisma__teachersClient<teachersGetPayload<T>>>

    /**
     * Delete zero or more Teachers.
     * @param {teachersDeleteManyArgs} args - Arguments to filter Teachers to delete.
     * @example
     * // Delete a few Teachers
     * const { count } = await prisma.teachers.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends teachersDeleteManyArgs>(
      args?: SelectSubset<T, teachersDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teachers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {teachersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Teachers
     * const teachers = await prisma.teachers.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends teachersUpdateManyArgs>(
      args: SelectSubset<T, teachersUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Teachers.
     * @param {teachersUpsertArgs} args - Arguments to update or create a Teachers.
     * @example
     * // Update or create a Teachers
     * const teachers = await prisma.teachers.upsert({
     *   create: {
     *     // ... data to create a Teachers
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Teachers we want to update
     *   }
     * })
    **/
    upsert<T extends teachersUpsertArgs>(
      args: SelectSubset<T, teachersUpsertArgs>
    ): CheckSelect<T, Prisma__teachersClient<teachers>, Prisma__teachersClient<teachersGetPayload<T>>>

    /**
     * Count the number of Teachers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {teachersCountArgs} args - Arguments to filter Teachers to count.
     * @example
     * // Count the number of Teachers
     * const count = await prisma.teachers.count({
     *   where: {
     *     // ... the filter for the Teachers we want to count
     *   }
     * })
    **/
    count<T extends teachersCountArgs>(
      args?: Subset<T, teachersCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeachersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Teachers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeachersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeachersAggregateArgs>(args: Subset<T, TeachersAggregateArgs>): PrismaPromise<GetTeachersAggregateType<T>>

    /**
     * Group by Teachers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeachersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeachersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeachersGroupByArgs['orderBy'] }
        : { orderBy?: TeachersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeachersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeachersGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for teachers.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__teachersClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Term<T extends TermFindManyArgs = {}>(args?: Subset<T, TermFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Term>>, PrismaPromise<Array<TermGetPayload<T>>>>;

    TeacherDiscipline<T extends TeacherDisciplineFindManyArgs = {}>(args?: Subset<T, TeacherDisciplineFindManyArgs>): CheckSelect<T, PrismaPromise<Array<TeacherDiscipline>>, PrismaPromise<Array<TeacherDisciplineGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * teachers findUnique
   */
  export type teachersFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the teachers
     * 
    **/
    select?: teachersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: teachersInclude | null
    /**
     * Throw an Error if a teachers can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which teachers to fetch.
     * 
    **/
    where: teachersWhereUniqueInput
  }


  /**
   * teachers findFirst
   */
  export type teachersFindFirstArgs = {
    /**
     * Select specific fields to fetch from the teachers
     * 
    **/
    select?: teachersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: teachersInclude | null
    /**
     * Throw an Error if a teachers can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which teachers to fetch.
     * 
    **/
    where?: teachersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of teachers to fetch.
     * 
    **/
    orderBy?: Enumerable<teachersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for teachers.
     * 
    **/
    cursor?: teachersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` teachers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` teachers.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of teachers.
     * 
    **/
    distinct?: Enumerable<TeachersScalarFieldEnum>
  }


  /**
   * teachers findMany
   */
  export type teachersFindManyArgs = {
    /**
     * Select specific fields to fetch from the teachers
     * 
    **/
    select?: teachersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: teachersInclude | null
    /**
     * Filter, which teachers to fetch.
     * 
    **/
    where?: teachersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of teachers to fetch.
     * 
    **/
    orderBy?: Enumerable<teachersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing teachers.
     * 
    **/
    cursor?: teachersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` teachers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` teachers.
     * 
    **/
    skip?: number
    distinct?: Enumerable<TeachersScalarFieldEnum>
  }


  /**
   * teachers create
   */
  export type teachersCreateArgs = {
    /**
     * Select specific fields to fetch from the teachers
     * 
    **/
    select?: teachersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: teachersInclude | null
    /**
     * The data needed to create a teachers.
     * 
    **/
    data: XOR<teachersCreateInput, teachersUncheckedCreateInput>
  }


  /**
   * teachers createMany
   */
  export type teachersCreateManyArgs = {
    /**
     * The data used to create many teachers.
     * 
    **/
    data: Enumerable<teachersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * teachers update
   */
  export type teachersUpdateArgs = {
    /**
     * Select specific fields to fetch from the teachers
     * 
    **/
    select?: teachersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: teachersInclude | null
    /**
     * The data needed to update a teachers.
     * 
    **/
    data: XOR<teachersUpdateInput, teachersUncheckedUpdateInput>
    /**
     * Choose, which teachers to update.
     * 
    **/
    where: teachersWhereUniqueInput
  }


  /**
   * teachers updateMany
   */
  export type teachersUpdateManyArgs = {
    /**
     * The data used to update teachers.
     * 
    **/
    data: XOR<teachersUpdateManyMutationInput, teachersUncheckedUpdateManyInput>
    /**
     * Filter which teachers to update
     * 
    **/
    where?: teachersWhereInput
  }


  /**
   * teachers upsert
   */
  export type teachersUpsertArgs = {
    /**
     * Select specific fields to fetch from the teachers
     * 
    **/
    select?: teachersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: teachersInclude | null
    /**
     * The filter to search for the teachers to update in case it exists.
     * 
    **/
    where: teachersWhereUniqueInput
    /**
     * In case the teachers found by the `where` argument doesn't exist, create a new teachers with this data.
     * 
    **/
    create: XOR<teachersCreateInput, teachersUncheckedCreateInput>
    /**
     * In case the teachers was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<teachersUpdateInput, teachersUncheckedUpdateInput>
  }


  /**
   * teachers delete
   */
  export type teachersDeleteArgs = {
    /**
     * Select specific fields to fetch from the teachers
     * 
    **/
    select?: teachersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: teachersInclude | null
    /**
     * Filter which teachers to delete.
     * 
    **/
    where: teachersWhereUniqueInput
  }


  /**
   * teachers deleteMany
   */
  export type teachersDeleteManyArgs = {
    /**
     * Filter which teachers to delete
     * 
    **/
    where?: teachersWhereInput
  }


  /**
   * teachers without action
   */
  export type teachersArgs = {
    /**
     * Select specific fields to fetch from the teachers
     * 
    **/
    select?: teachersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: teachersInclude | null
  }



  /**
   * Model TeacherDiscipline
   */


  export type AggregateTeacherDiscipline = {
    _count: TeacherDisciplineCountAggregateOutputType | null
    _avg: TeacherDisciplineAvgAggregateOutputType | null
    _sum: TeacherDisciplineSumAggregateOutputType | null
    _min: TeacherDisciplineMinAggregateOutputType | null
    _max: TeacherDisciplineMaxAggregateOutputType | null
  }

  export type TeacherDisciplineAvgAggregateOutputType = {
    id: number | null
    teacherId: number | null
    disciplineId: number | null
  }

  export type TeacherDisciplineSumAggregateOutputType = {
    id: number | null
    teacherId: number | null
    disciplineId: number | null
  }

  export type TeacherDisciplineMinAggregateOutputType = {
    id: number | null
    teacherId: number | null
    disciplineId: number | null
  }

  export type TeacherDisciplineMaxAggregateOutputType = {
    id: number | null
    teacherId: number | null
    disciplineId: number | null
  }

  export type TeacherDisciplineCountAggregateOutputType = {
    id: number
    teacherId: number
    disciplineId: number
    _all: number
  }


  export type TeacherDisciplineAvgAggregateInputType = {
    id?: true
    teacherId?: true
    disciplineId?: true
  }

  export type TeacherDisciplineSumAggregateInputType = {
    id?: true
    teacherId?: true
    disciplineId?: true
  }

  export type TeacherDisciplineMinAggregateInputType = {
    id?: true
    teacherId?: true
    disciplineId?: true
  }

  export type TeacherDisciplineMaxAggregateInputType = {
    id?: true
    teacherId?: true
    disciplineId?: true
  }

  export type TeacherDisciplineCountAggregateInputType = {
    id?: true
    teacherId?: true
    disciplineId?: true
    _all?: true
  }

  export type TeacherDisciplineAggregateArgs = {
    /**
     * Filter which TeacherDiscipline to aggregate.
     * 
    **/
    where?: TeacherDisciplineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeacherDisciplines to fetch.
     * 
    **/
    orderBy?: Enumerable<TeacherDisciplineOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: TeacherDisciplineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeacherDisciplines from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeacherDisciplines.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TeacherDisciplines
    **/
    _count?: true | TeacherDisciplineCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TeacherDisciplineAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TeacherDisciplineSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeacherDisciplineMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeacherDisciplineMaxAggregateInputType
  }

  export type GetTeacherDisciplineAggregateType<T extends TeacherDisciplineAggregateArgs> = {
        [P in keyof T & keyof AggregateTeacherDiscipline]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeacherDiscipline[P]>
      : GetScalarType<T[P], AggregateTeacherDiscipline[P]>
  }




  export type TeacherDisciplineGroupByArgs = {
    where?: TeacherDisciplineWhereInput
    orderBy?: Enumerable<TeacherDisciplineOrderByWithAggregationInput>
    by: Array<TeacherDisciplineScalarFieldEnum>
    having?: TeacherDisciplineScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeacherDisciplineCountAggregateInputType | true
    _avg?: TeacherDisciplineAvgAggregateInputType
    _sum?: TeacherDisciplineSumAggregateInputType
    _min?: TeacherDisciplineMinAggregateInputType
    _max?: TeacherDisciplineMaxAggregateInputType
  }


  export type TeacherDisciplineGroupByOutputType = {
    id: number
    teacherId: number
    disciplineId: number
    _count: TeacherDisciplineCountAggregateOutputType | null
    _avg: TeacherDisciplineAvgAggregateOutputType | null
    _sum: TeacherDisciplineSumAggregateOutputType | null
    _min: TeacherDisciplineMinAggregateOutputType | null
    _max: TeacherDisciplineMaxAggregateOutputType | null
  }

  type GetTeacherDisciplineGroupByPayload<T extends TeacherDisciplineGroupByArgs> = PrismaPromise<
    Array<
      PickArray<TeacherDisciplineGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeacherDisciplineGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeacherDisciplineGroupByOutputType[P]>
            : GetScalarType<T[P], TeacherDisciplineGroupByOutputType[P]>
        }
      >
    >


  export type TeacherDisciplineSelect = {
    id?: boolean
    teacherId?: boolean
    disciplineId?: boolean
    teachers?: boolean | teachersArgs
    Discipline?: boolean | DisciplineArgs
    Test?: boolean | TestFindManyArgs
    _count?: boolean | TeacherDisciplineCountOutputTypeArgs
  }

  export type TeacherDisciplineInclude = {
    teachers?: boolean | teachersArgs
    Discipline?: boolean | DisciplineArgs
    Test?: boolean | TestFindManyArgs
    _count?: boolean | TeacherDisciplineCountOutputTypeArgs
  }

  export type TeacherDisciplineGetPayload<
    S extends boolean | null | undefined | TeacherDisciplineArgs,
    U = keyof S
      > = S extends true
        ? TeacherDiscipline
    : S extends undefined
    ? never
    : S extends TeacherDisciplineArgs | TeacherDisciplineFindManyArgs
    ?'include' extends U
    ? TeacherDiscipline  & {
    [P in TrueKeys<S['include']>]:
        P extends 'teachers' ? teachersGetPayload<S['include'][P]> :
        P extends 'Discipline' ? DisciplineGetPayload<S['include'][P]> :
        P extends 'Test' ? Array < TestGetPayload<S['include'][P]>>  :
        P extends '_count' ? TeacherDisciplineCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'teachers' ? teachersGetPayload<S['select'][P]> :
        P extends 'Discipline' ? DisciplineGetPayload<S['select'][P]> :
        P extends 'Test' ? Array < TestGetPayload<S['select'][P]>>  :
        P extends '_count' ? TeacherDisciplineCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof TeacherDiscipline ? TeacherDiscipline[P] : never
  } 
    : TeacherDiscipline
  : TeacherDiscipline


  type TeacherDisciplineCountArgs = Merge<
    Omit<TeacherDisciplineFindManyArgs, 'select' | 'include'> & {
      select?: TeacherDisciplineCountAggregateInputType | true
    }
  >

  export interface TeacherDisciplineDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one TeacherDiscipline that matches the filter.
     * @param {TeacherDisciplineFindUniqueArgs} args - Arguments to find a TeacherDiscipline
     * @example
     * // Get one TeacherDiscipline
     * const teacherDiscipline = await prisma.teacherDiscipline.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TeacherDisciplineFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TeacherDisciplineFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'TeacherDiscipline'> extends True ? CheckSelect<T, Prisma__TeacherDisciplineClient<TeacherDiscipline>, Prisma__TeacherDisciplineClient<TeacherDisciplineGetPayload<T>>> : CheckSelect<T, Prisma__TeacherDisciplineClient<TeacherDiscipline | null >, Prisma__TeacherDisciplineClient<TeacherDisciplineGetPayload<T> | null >>

    /**
     * Find the first TeacherDiscipline that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherDisciplineFindFirstArgs} args - Arguments to find a TeacherDiscipline
     * @example
     * // Get one TeacherDiscipline
     * const teacherDiscipline = await prisma.teacherDiscipline.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TeacherDisciplineFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TeacherDisciplineFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'TeacherDiscipline'> extends True ? CheckSelect<T, Prisma__TeacherDisciplineClient<TeacherDiscipline>, Prisma__TeacherDisciplineClient<TeacherDisciplineGetPayload<T>>> : CheckSelect<T, Prisma__TeacherDisciplineClient<TeacherDiscipline | null >, Prisma__TeacherDisciplineClient<TeacherDisciplineGetPayload<T> | null >>

    /**
     * Find zero or more TeacherDisciplines that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherDisciplineFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TeacherDisciplines
     * const teacherDisciplines = await prisma.teacherDiscipline.findMany()
     * 
     * // Get first 10 TeacherDisciplines
     * const teacherDisciplines = await prisma.teacherDiscipline.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teacherDisciplineWithIdOnly = await prisma.teacherDiscipline.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TeacherDisciplineFindManyArgs>(
      args?: SelectSubset<T, TeacherDisciplineFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<TeacherDiscipline>>, PrismaPromise<Array<TeacherDisciplineGetPayload<T>>>>

    /**
     * Create a TeacherDiscipline.
     * @param {TeacherDisciplineCreateArgs} args - Arguments to create a TeacherDiscipline.
     * @example
     * // Create one TeacherDiscipline
     * const TeacherDiscipline = await prisma.teacherDiscipline.create({
     *   data: {
     *     // ... data to create a TeacherDiscipline
     *   }
     * })
     * 
    **/
    create<T extends TeacherDisciplineCreateArgs>(
      args: SelectSubset<T, TeacherDisciplineCreateArgs>
    ): CheckSelect<T, Prisma__TeacherDisciplineClient<TeacherDiscipline>, Prisma__TeacherDisciplineClient<TeacherDisciplineGetPayload<T>>>

    /**
     * Create many TeacherDisciplines.
     *     @param {TeacherDisciplineCreateManyArgs} args - Arguments to create many TeacherDisciplines.
     *     @example
     *     // Create many TeacherDisciplines
     *     const teacherDiscipline = await prisma.teacherDiscipline.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TeacherDisciplineCreateManyArgs>(
      args?: SelectSubset<T, TeacherDisciplineCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a TeacherDiscipline.
     * @param {TeacherDisciplineDeleteArgs} args - Arguments to delete one TeacherDiscipline.
     * @example
     * // Delete one TeacherDiscipline
     * const TeacherDiscipline = await prisma.teacherDiscipline.delete({
     *   where: {
     *     // ... filter to delete one TeacherDiscipline
     *   }
     * })
     * 
    **/
    delete<T extends TeacherDisciplineDeleteArgs>(
      args: SelectSubset<T, TeacherDisciplineDeleteArgs>
    ): CheckSelect<T, Prisma__TeacherDisciplineClient<TeacherDiscipline>, Prisma__TeacherDisciplineClient<TeacherDisciplineGetPayload<T>>>

    /**
     * Update one TeacherDiscipline.
     * @param {TeacherDisciplineUpdateArgs} args - Arguments to update one TeacherDiscipline.
     * @example
     * // Update one TeacherDiscipline
     * const teacherDiscipline = await prisma.teacherDiscipline.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TeacherDisciplineUpdateArgs>(
      args: SelectSubset<T, TeacherDisciplineUpdateArgs>
    ): CheckSelect<T, Prisma__TeacherDisciplineClient<TeacherDiscipline>, Prisma__TeacherDisciplineClient<TeacherDisciplineGetPayload<T>>>

    /**
     * Delete zero or more TeacherDisciplines.
     * @param {TeacherDisciplineDeleteManyArgs} args - Arguments to filter TeacherDisciplines to delete.
     * @example
     * // Delete a few TeacherDisciplines
     * const { count } = await prisma.teacherDiscipline.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TeacherDisciplineDeleteManyArgs>(
      args?: SelectSubset<T, TeacherDisciplineDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more TeacherDisciplines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherDisciplineUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TeacherDisciplines
     * const teacherDiscipline = await prisma.teacherDiscipline.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TeacherDisciplineUpdateManyArgs>(
      args: SelectSubset<T, TeacherDisciplineUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one TeacherDiscipline.
     * @param {TeacherDisciplineUpsertArgs} args - Arguments to update or create a TeacherDiscipline.
     * @example
     * // Update or create a TeacherDiscipline
     * const teacherDiscipline = await prisma.teacherDiscipline.upsert({
     *   create: {
     *     // ... data to create a TeacherDiscipline
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TeacherDiscipline we want to update
     *   }
     * })
    **/
    upsert<T extends TeacherDisciplineUpsertArgs>(
      args: SelectSubset<T, TeacherDisciplineUpsertArgs>
    ): CheckSelect<T, Prisma__TeacherDisciplineClient<TeacherDiscipline>, Prisma__TeacherDisciplineClient<TeacherDisciplineGetPayload<T>>>

    /**
     * Count the number of TeacherDisciplines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherDisciplineCountArgs} args - Arguments to filter TeacherDisciplines to count.
     * @example
     * // Count the number of TeacherDisciplines
     * const count = await prisma.teacherDiscipline.count({
     *   where: {
     *     // ... the filter for the TeacherDisciplines we want to count
     *   }
     * })
    **/
    count<T extends TeacherDisciplineCountArgs>(
      args?: Subset<T, TeacherDisciplineCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeacherDisciplineCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TeacherDiscipline.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherDisciplineAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeacherDisciplineAggregateArgs>(args: Subset<T, TeacherDisciplineAggregateArgs>): PrismaPromise<GetTeacherDisciplineAggregateType<T>>

    /**
     * Group by TeacherDiscipline.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherDisciplineGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeacherDisciplineGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeacherDisciplineGroupByArgs['orderBy'] }
        : { orderBy?: TeacherDisciplineGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeacherDisciplineGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeacherDisciplineGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for TeacherDiscipline.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TeacherDisciplineClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    teachers<T extends teachersArgs = {}>(args?: Subset<T, teachersArgs>): CheckSelect<T, Prisma__teachersClient<teachers | null >, Prisma__teachersClient<teachersGetPayload<T> | null >>;

    Discipline<T extends DisciplineArgs = {}>(args?: Subset<T, DisciplineArgs>): CheckSelect<T, Prisma__DisciplineClient<Discipline | null >, Prisma__DisciplineClient<DisciplineGetPayload<T> | null >>;

    Test<T extends TestFindManyArgs = {}>(args?: Subset<T, TestFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Test>>, PrismaPromise<Array<TestGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * TeacherDiscipline findUnique
   */
  export type TeacherDisciplineFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the TeacherDiscipline
     * 
    **/
    select?: TeacherDisciplineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeacherDisciplineInclude | null
    /**
     * Throw an Error if a TeacherDiscipline can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which TeacherDiscipline to fetch.
     * 
    **/
    where: TeacherDisciplineWhereUniqueInput
  }


  /**
   * TeacherDiscipline findFirst
   */
  export type TeacherDisciplineFindFirstArgs = {
    /**
     * Select specific fields to fetch from the TeacherDiscipline
     * 
    **/
    select?: TeacherDisciplineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeacherDisciplineInclude | null
    /**
     * Throw an Error if a TeacherDiscipline can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which TeacherDiscipline to fetch.
     * 
    **/
    where?: TeacherDisciplineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeacherDisciplines to fetch.
     * 
    **/
    orderBy?: Enumerable<TeacherDisciplineOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TeacherDisciplines.
     * 
    **/
    cursor?: TeacherDisciplineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeacherDisciplines from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeacherDisciplines.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TeacherDisciplines.
     * 
    **/
    distinct?: Enumerable<TeacherDisciplineScalarFieldEnum>
  }


  /**
   * TeacherDiscipline findMany
   */
  export type TeacherDisciplineFindManyArgs = {
    /**
     * Select specific fields to fetch from the TeacherDiscipline
     * 
    **/
    select?: TeacherDisciplineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeacherDisciplineInclude | null
    /**
     * Filter, which TeacherDisciplines to fetch.
     * 
    **/
    where?: TeacherDisciplineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeacherDisciplines to fetch.
     * 
    **/
    orderBy?: Enumerable<TeacherDisciplineOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TeacherDisciplines.
     * 
    **/
    cursor?: TeacherDisciplineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeacherDisciplines from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeacherDisciplines.
     * 
    **/
    skip?: number
    distinct?: Enumerable<TeacherDisciplineScalarFieldEnum>
  }


  /**
   * TeacherDiscipline create
   */
  export type TeacherDisciplineCreateArgs = {
    /**
     * Select specific fields to fetch from the TeacherDiscipline
     * 
    **/
    select?: TeacherDisciplineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeacherDisciplineInclude | null
    /**
     * The data needed to create a TeacherDiscipline.
     * 
    **/
    data: XOR<TeacherDisciplineCreateInput, TeacherDisciplineUncheckedCreateInput>
  }


  /**
   * TeacherDiscipline createMany
   */
  export type TeacherDisciplineCreateManyArgs = {
    /**
     * The data used to create many TeacherDisciplines.
     * 
    **/
    data: Enumerable<TeacherDisciplineCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * TeacherDiscipline update
   */
  export type TeacherDisciplineUpdateArgs = {
    /**
     * Select specific fields to fetch from the TeacherDiscipline
     * 
    **/
    select?: TeacherDisciplineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeacherDisciplineInclude | null
    /**
     * The data needed to update a TeacherDiscipline.
     * 
    **/
    data: XOR<TeacherDisciplineUpdateInput, TeacherDisciplineUncheckedUpdateInput>
    /**
     * Choose, which TeacherDiscipline to update.
     * 
    **/
    where: TeacherDisciplineWhereUniqueInput
  }


  /**
   * TeacherDiscipline updateMany
   */
  export type TeacherDisciplineUpdateManyArgs = {
    /**
     * The data used to update TeacherDisciplines.
     * 
    **/
    data: XOR<TeacherDisciplineUpdateManyMutationInput, TeacherDisciplineUncheckedUpdateManyInput>
    /**
     * Filter which TeacherDisciplines to update
     * 
    **/
    where?: TeacherDisciplineWhereInput
  }


  /**
   * TeacherDiscipline upsert
   */
  export type TeacherDisciplineUpsertArgs = {
    /**
     * Select specific fields to fetch from the TeacherDiscipline
     * 
    **/
    select?: TeacherDisciplineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeacherDisciplineInclude | null
    /**
     * The filter to search for the TeacherDiscipline to update in case it exists.
     * 
    **/
    where: TeacherDisciplineWhereUniqueInput
    /**
     * In case the TeacherDiscipline found by the `where` argument doesn't exist, create a new TeacherDiscipline with this data.
     * 
    **/
    create: XOR<TeacherDisciplineCreateInput, TeacherDisciplineUncheckedCreateInput>
    /**
     * In case the TeacherDiscipline was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<TeacherDisciplineUpdateInput, TeacherDisciplineUncheckedUpdateInput>
  }


  /**
   * TeacherDiscipline delete
   */
  export type TeacherDisciplineDeleteArgs = {
    /**
     * Select specific fields to fetch from the TeacherDiscipline
     * 
    **/
    select?: TeacherDisciplineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeacherDisciplineInclude | null
    /**
     * Filter which TeacherDiscipline to delete.
     * 
    **/
    where: TeacherDisciplineWhereUniqueInput
  }


  /**
   * TeacherDiscipline deleteMany
   */
  export type TeacherDisciplineDeleteManyArgs = {
    /**
     * Filter which TeacherDisciplines to delete
     * 
    **/
    where?: TeacherDisciplineWhereInput
  }


  /**
   * TeacherDiscipline without action
   */
  export type TeacherDisciplineArgs = {
    /**
     * Select specific fields to fetch from the TeacherDiscipline
     * 
    **/
    select?: TeacherDisciplineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeacherDisciplineInclude | null
  }



  /**
   * Model Test
   */


  export type AggregateTest = {
    _count: TestCountAggregateOutputType | null
    _avg: TestAvgAggregateOutputType | null
    _sum: TestSumAggregateOutputType | null
    _min: TestMinAggregateOutputType | null
    _max: TestMaxAggregateOutputType | null
  }

  export type TestAvgAggregateOutputType = {
    id: number | null
    categoryId: number | null
    teacherDisciplineId: number | null
  }

  export type TestSumAggregateOutputType = {
    id: number | null
    categoryId: number | null
    teacherDisciplineId: number | null
  }

  export type TestMinAggregateOutputType = {
    id: number | null
    name: string | null
    pdfUrl: string | null
    categoryId: number | null
    teacherDisciplineId: number | null
  }

  export type TestMaxAggregateOutputType = {
    id: number | null
    name: string | null
    pdfUrl: string | null
    categoryId: number | null
    teacherDisciplineId: number | null
  }

  export type TestCountAggregateOutputType = {
    id: number
    name: number
    pdfUrl: number
    categoryId: number
    teacherDisciplineId: number
    _all: number
  }


  export type TestAvgAggregateInputType = {
    id?: true
    categoryId?: true
    teacherDisciplineId?: true
  }

  export type TestSumAggregateInputType = {
    id?: true
    categoryId?: true
    teacherDisciplineId?: true
  }

  export type TestMinAggregateInputType = {
    id?: true
    name?: true
    pdfUrl?: true
    categoryId?: true
    teacherDisciplineId?: true
  }

  export type TestMaxAggregateInputType = {
    id?: true
    name?: true
    pdfUrl?: true
    categoryId?: true
    teacherDisciplineId?: true
  }

  export type TestCountAggregateInputType = {
    id?: true
    name?: true
    pdfUrl?: true
    categoryId?: true
    teacherDisciplineId?: true
    _all?: true
  }

  export type TestAggregateArgs = {
    /**
     * Filter which Test to aggregate.
     * 
    **/
    where?: TestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tests to fetch.
     * 
    **/
    orderBy?: Enumerable<TestOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: TestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tests from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tests.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tests
    **/
    _count?: true | TestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TestAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TestSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TestMaxAggregateInputType
  }

  export type GetTestAggregateType<T extends TestAggregateArgs> = {
        [P in keyof T & keyof AggregateTest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTest[P]>
      : GetScalarType<T[P], AggregateTest[P]>
  }




  export type TestGroupByArgs = {
    where?: TestWhereInput
    orderBy?: Enumerable<TestOrderByWithAggregationInput>
    by: Array<TestScalarFieldEnum>
    having?: TestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TestCountAggregateInputType | true
    _avg?: TestAvgAggregateInputType
    _sum?: TestSumAggregateInputType
    _min?: TestMinAggregateInputType
    _max?: TestMaxAggregateInputType
  }


  export type TestGroupByOutputType = {
    id: number
    name: string
    pdfUrl: string
    categoryId: number
    teacherDisciplineId: number
    _count: TestCountAggregateOutputType | null
    _avg: TestAvgAggregateOutputType | null
    _sum: TestSumAggregateOutputType | null
    _min: TestMinAggregateOutputType | null
    _max: TestMaxAggregateOutputType | null
  }

  type GetTestGroupByPayload<T extends TestGroupByArgs> = PrismaPromise<
    Array<
      PickArray<TestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TestGroupByOutputType[P]>
            : GetScalarType<T[P], TestGroupByOutputType[P]>
        }
      >
    >


  export type TestSelect = {
    id?: boolean
    name?: boolean
    pdfUrl?: boolean
    categoryId?: boolean
    teacherDisciplineId?: boolean
    Category?: boolean | CategoryArgs
    TeacherDiscipline?: boolean | TeacherDisciplineArgs
  }

  export type TestInclude = {
    Category?: boolean | CategoryArgs
    TeacherDiscipline?: boolean | TeacherDisciplineArgs
  }

  export type TestGetPayload<
    S extends boolean | null | undefined | TestArgs,
    U = keyof S
      > = S extends true
        ? Test
    : S extends undefined
    ? never
    : S extends TestArgs | TestFindManyArgs
    ?'include' extends U
    ? Test  & {
    [P in TrueKeys<S['include']>]:
        P extends 'Category' ? CategoryGetPayload<S['include'][P]> :
        P extends 'TeacherDiscipline' ? TeacherDisciplineGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'Category' ? CategoryGetPayload<S['select'][P]> :
        P extends 'TeacherDiscipline' ? TeacherDisciplineGetPayload<S['select'][P]> :  P extends keyof Test ? Test[P] : never
  } 
    : Test
  : Test


  type TestCountArgs = Merge<
    Omit<TestFindManyArgs, 'select' | 'include'> & {
      select?: TestCountAggregateInputType | true
    }
  >

  export interface TestDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Test that matches the filter.
     * @param {TestFindUniqueArgs} args - Arguments to find a Test
     * @example
     * // Get one Test
     * const test = await prisma.test.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TestFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TestFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Test'> extends True ? CheckSelect<T, Prisma__TestClient<Test>, Prisma__TestClient<TestGetPayload<T>>> : CheckSelect<T, Prisma__TestClient<Test | null >, Prisma__TestClient<TestGetPayload<T> | null >>

    /**
     * Find the first Test that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestFindFirstArgs} args - Arguments to find a Test
     * @example
     * // Get one Test
     * const test = await prisma.test.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TestFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TestFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Test'> extends True ? CheckSelect<T, Prisma__TestClient<Test>, Prisma__TestClient<TestGetPayload<T>>> : CheckSelect<T, Prisma__TestClient<Test | null >, Prisma__TestClient<TestGetPayload<T> | null >>

    /**
     * Find zero or more Tests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tests
     * const tests = await prisma.test.findMany()
     * 
     * // Get first 10 Tests
     * const tests = await prisma.test.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const testWithIdOnly = await prisma.test.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TestFindManyArgs>(
      args?: SelectSubset<T, TestFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Test>>, PrismaPromise<Array<TestGetPayload<T>>>>

    /**
     * Create a Test.
     * @param {TestCreateArgs} args - Arguments to create a Test.
     * @example
     * // Create one Test
     * const Test = await prisma.test.create({
     *   data: {
     *     // ... data to create a Test
     *   }
     * })
     * 
    **/
    create<T extends TestCreateArgs>(
      args: SelectSubset<T, TestCreateArgs>
    ): CheckSelect<T, Prisma__TestClient<Test>, Prisma__TestClient<TestGetPayload<T>>>

    /**
     * Create many Tests.
     *     @param {TestCreateManyArgs} args - Arguments to create many Tests.
     *     @example
     *     // Create many Tests
     *     const test = await prisma.test.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TestCreateManyArgs>(
      args?: SelectSubset<T, TestCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Test.
     * @param {TestDeleteArgs} args - Arguments to delete one Test.
     * @example
     * // Delete one Test
     * const Test = await prisma.test.delete({
     *   where: {
     *     // ... filter to delete one Test
     *   }
     * })
     * 
    **/
    delete<T extends TestDeleteArgs>(
      args: SelectSubset<T, TestDeleteArgs>
    ): CheckSelect<T, Prisma__TestClient<Test>, Prisma__TestClient<TestGetPayload<T>>>

    /**
     * Update one Test.
     * @param {TestUpdateArgs} args - Arguments to update one Test.
     * @example
     * // Update one Test
     * const test = await prisma.test.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TestUpdateArgs>(
      args: SelectSubset<T, TestUpdateArgs>
    ): CheckSelect<T, Prisma__TestClient<Test>, Prisma__TestClient<TestGetPayload<T>>>

    /**
     * Delete zero or more Tests.
     * @param {TestDeleteManyArgs} args - Arguments to filter Tests to delete.
     * @example
     * // Delete a few Tests
     * const { count } = await prisma.test.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TestDeleteManyArgs>(
      args?: SelectSubset<T, TestDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tests
     * const test = await prisma.test.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TestUpdateManyArgs>(
      args: SelectSubset<T, TestUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Test.
     * @param {TestUpsertArgs} args - Arguments to update or create a Test.
     * @example
     * // Update or create a Test
     * const test = await prisma.test.upsert({
     *   create: {
     *     // ... data to create a Test
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Test we want to update
     *   }
     * })
    **/
    upsert<T extends TestUpsertArgs>(
      args: SelectSubset<T, TestUpsertArgs>
    ): CheckSelect<T, Prisma__TestClient<Test>, Prisma__TestClient<TestGetPayload<T>>>

    /**
     * Count the number of Tests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestCountArgs} args - Arguments to filter Tests to count.
     * @example
     * // Count the number of Tests
     * const count = await prisma.test.count({
     *   where: {
     *     // ... the filter for the Tests we want to count
     *   }
     * })
    **/
    count<T extends TestCountArgs>(
      args?: Subset<T, TestCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Test.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TestAggregateArgs>(args: Subset<T, TestAggregateArgs>): PrismaPromise<GetTestAggregateType<T>>

    /**
     * Group by Test.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TestGroupByArgs['orderBy'] }
        : { orderBy?: TestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTestGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Test.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TestClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Category<T extends CategoryArgs = {}>(args?: Subset<T, CategoryArgs>): CheckSelect<T, Prisma__CategoryClient<Category | null >, Prisma__CategoryClient<CategoryGetPayload<T> | null >>;

    TeacherDiscipline<T extends TeacherDisciplineArgs = {}>(args?: Subset<T, TeacherDisciplineArgs>): CheckSelect<T, Prisma__TeacherDisciplineClient<TeacherDiscipline | null >, Prisma__TeacherDisciplineClient<TeacherDisciplineGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Test findUnique
   */
  export type TestFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Test
     * 
    **/
    select?: TestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TestInclude | null
    /**
     * Throw an Error if a Test can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Test to fetch.
     * 
    **/
    where: TestWhereUniqueInput
  }


  /**
   * Test findFirst
   */
  export type TestFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Test
     * 
    **/
    select?: TestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TestInclude | null
    /**
     * Throw an Error if a Test can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Test to fetch.
     * 
    **/
    where?: TestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tests to fetch.
     * 
    **/
    orderBy?: Enumerable<TestOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tests.
     * 
    **/
    cursor?: TestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tests from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tests.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tests.
     * 
    **/
    distinct?: Enumerable<TestScalarFieldEnum>
  }


  /**
   * Test findMany
   */
  export type TestFindManyArgs = {
    /**
     * Select specific fields to fetch from the Test
     * 
    **/
    select?: TestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TestInclude | null
    /**
     * Filter, which Tests to fetch.
     * 
    **/
    where?: TestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tests to fetch.
     * 
    **/
    orderBy?: Enumerable<TestOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tests.
     * 
    **/
    cursor?: TestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tests from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tests.
     * 
    **/
    skip?: number
    distinct?: Enumerable<TestScalarFieldEnum>
  }


  /**
   * Test create
   */
  export type TestCreateArgs = {
    /**
     * Select specific fields to fetch from the Test
     * 
    **/
    select?: TestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TestInclude | null
    /**
     * The data needed to create a Test.
     * 
    **/
    data: XOR<TestCreateInput, TestUncheckedCreateInput>
  }


  /**
   * Test createMany
   */
  export type TestCreateManyArgs = {
    /**
     * The data used to create many Tests.
     * 
    **/
    data: Enumerable<TestCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Test update
   */
  export type TestUpdateArgs = {
    /**
     * Select specific fields to fetch from the Test
     * 
    **/
    select?: TestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TestInclude | null
    /**
     * The data needed to update a Test.
     * 
    **/
    data: XOR<TestUpdateInput, TestUncheckedUpdateInput>
    /**
     * Choose, which Test to update.
     * 
    **/
    where: TestWhereUniqueInput
  }


  /**
   * Test updateMany
   */
  export type TestUpdateManyArgs = {
    /**
     * The data used to update Tests.
     * 
    **/
    data: XOR<TestUpdateManyMutationInput, TestUncheckedUpdateManyInput>
    /**
     * Filter which Tests to update
     * 
    **/
    where?: TestWhereInput
  }


  /**
   * Test upsert
   */
  export type TestUpsertArgs = {
    /**
     * Select specific fields to fetch from the Test
     * 
    **/
    select?: TestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TestInclude | null
    /**
     * The filter to search for the Test to update in case it exists.
     * 
    **/
    where: TestWhereUniqueInput
    /**
     * In case the Test found by the `where` argument doesn't exist, create a new Test with this data.
     * 
    **/
    create: XOR<TestCreateInput, TestUncheckedCreateInput>
    /**
     * In case the Test was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<TestUpdateInput, TestUncheckedUpdateInput>
  }


  /**
   * Test delete
   */
  export type TestDeleteArgs = {
    /**
     * Select specific fields to fetch from the Test
     * 
    **/
    select?: TestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TestInclude | null
    /**
     * Filter which Test to delete.
     * 
    **/
    where: TestWhereUniqueInput
  }


  /**
   * Test deleteMany
   */
  export type TestDeleteManyArgs = {
    /**
     * Filter which Tests to delete
     * 
    **/
    where?: TestWhereInput
  }


  /**
   * Test without action
   */
  export type TestArgs = {
    /**
     * Select specific fields to fetch from the Test
     * 
    **/
    select?: TestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TestInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const TermScalarFieldEnum: {
    id: 'id',
    teacherId: 'teacherId'
  };

  export type TermScalarFieldEnum = (typeof TermScalarFieldEnum)[keyof typeof TermScalarFieldEnum]


  export const DisciplineScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type DisciplineScalarFieldEnum = (typeof DisciplineScalarFieldEnum)[keyof typeof DisciplineScalarFieldEnum]


  export const TeachersScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type TeachersScalarFieldEnum = (typeof TeachersScalarFieldEnum)[keyof typeof TeachersScalarFieldEnum]


  export const TeacherDisciplineScalarFieldEnum: {
    id: 'id',
    teacherId: 'teacherId',
    disciplineId: 'disciplineId'
  };

  export type TeacherDisciplineScalarFieldEnum = (typeof TeacherDisciplineScalarFieldEnum)[keyof typeof TeacherDisciplineScalarFieldEnum]


  export const TestScalarFieldEnum: {
    id: 'id',
    name: 'name',
    pdfUrl: 'pdfUrl',
    categoryId: 'categoryId',
    teacherDisciplineId: 'teacherDisciplineId'
  };

  export type TestScalarFieldEnum = (typeof TestScalarFieldEnum)[keyof typeof TestScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    email?: StringFilter | string
    password?: StringFilter | string
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type UserWhereUniqueInput = {
    id?: number
    email?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    email?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
  }

  export type CategoryWhereInput = {
    AND?: Enumerable<CategoryWhereInput>
    OR?: Enumerable<CategoryWhereInput>
    NOT?: Enumerable<CategoryWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    Test?: TestListRelationFilter
  }

  export type CategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    Test?: TestOrderByRelationAggregateInput
  }

  export type CategoryWhereUniqueInput = {
    id?: number
    name?: string
  }

  export type CategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: CategoryCountOrderByAggregateInput
    _avg?: CategoryAvgOrderByAggregateInput
    _max?: CategoryMaxOrderByAggregateInput
    _min?: CategoryMinOrderByAggregateInput
    _sum?: CategorySumOrderByAggregateInput
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CategoryScalarWhereWithAggregatesInput>
    OR?: Enumerable<CategoryScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CategoryScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
  }

  export type TermWhereInput = {
    AND?: Enumerable<TermWhereInput>
    OR?: Enumerable<TermWhereInput>
    NOT?: Enumerable<TermWhereInput>
    id?: IntFilter | number
    teacherId?: IntFilter | number
    teachers?: XOR<TeachersRelationFilter, teachersWhereInput>
  }

  export type TermOrderByWithRelationInput = {
    id?: SortOrder
    teacherId?: SortOrder
    teachers?: teachersOrderByWithRelationInput
  }

  export type TermWhereUniqueInput = {
    id?: number
  }

  export type TermOrderByWithAggregationInput = {
    id?: SortOrder
    teacherId?: SortOrder
    _count?: TermCountOrderByAggregateInput
    _avg?: TermAvgOrderByAggregateInput
    _max?: TermMaxOrderByAggregateInput
    _min?: TermMinOrderByAggregateInput
    _sum?: TermSumOrderByAggregateInput
  }

  export type TermScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TermScalarWhereWithAggregatesInput>
    OR?: Enumerable<TermScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TermScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    teacherId?: IntWithAggregatesFilter | number
  }

  export type DisciplineWhereInput = {
    AND?: Enumerable<DisciplineWhereInput>
    OR?: Enumerable<DisciplineWhereInput>
    NOT?: Enumerable<DisciplineWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    TeacherDiscipline?: TeacherDisciplineListRelationFilter
  }

  export type DisciplineOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    TeacherDiscipline?: TeacherDisciplineOrderByRelationAggregateInput
  }

  export type DisciplineWhereUniqueInput = {
    id?: number
  }

  export type DisciplineOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: DisciplineCountOrderByAggregateInput
    _avg?: DisciplineAvgOrderByAggregateInput
    _max?: DisciplineMaxOrderByAggregateInput
    _min?: DisciplineMinOrderByAggregateInput
    _sum?: DisciplineSumOrderByAggregateInput
  }

  export type DisciplineScalarWhereWithAggregatesInput = {
    AND?: Enumerable<DisciplineScalarWhereWithAggregatesInput>
    OR?: Enumerable<DisciplineScalarWhereWithAggregatesInput>
    NOT?: Enumerable<DisciplineScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
  }

  export type teachersWhereInput = {
    AND?: Enumerable<teachersWhereInput>
    OR?: Enumerable<teachersWhereInput>
    NOT?: Enumerable<teachersWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    Term?: TermListRelationFilter
    TeacherDiscipline?: TeacherDisciplineListRelationFilter
  }

  export type teachersOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    Term?: TermOrderByRelationAggregateInput
    TeacherDiscipline?: TeacherDisciplineOrderByRelationAggregateInput
  }

  export type teachersWhereUniqueInput = {
    id?: number
    name?: string
  }

  export type teachersOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: teachersCountOrderByAggregateInput
    _avg?: teachersAvgOrderByAggregateInput
    _max?: teachersMaxOrderByAggregateInput
    _min?: teachersMinOrderByAggregateInput
    _sum?: teachersSumOrderByAggregateInput
  }

  export type teachersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<teachersScalarWhereWithAggregatesInput>
    OR?: Enumerable<teachersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<teachersScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
  }

  export type TeacherDisciplineWhereInput = {
    AND?: Enumerable<TeacherDisciplineWhereInput>
    OR?: Enumerable<TeacherDisciplineWhereInput>
    NOT?: Enumerable<TeacherDisciplineWhereInput>
    id?: IntFilter | number
    teacherId?: IntFilter | number
    disciplineId?: IntFilter | number
    teachers?: XOR<TeachersRelationFilter, teachersWhereInput>
    Discipline?: XOR<DisciplineRelationFilter, DisciplineWhereInput>
    Test?: TestListRelationFilter
  }

  export type TeacherDisciplineOrderByWithRelationInput = {
    id?: SortOrder
    teacherId?: SortOrder
    disciplineId?: SortOrder
    teachers?: teachersOrderByWithRelationInput
    Discipline?: DisciplineOrderByWithRelationInput
    Test?: TestOrderByRelationAggregateInput
  }

  export type TeacherDisciplineWhereUniqueInput = {
    id?: number
  }

  export type TeacherDisciplineOrderByWithAggregationInput = {
    id?: SortOrder
    teacherId?: SortOrder
    disciplineId?: SortOrder
    _count?: TeacherDisciplineCountOrderByAggregateInput
    _avg?: TeacherDisciplineAvgOrderByAggregateInput
    _max?: TeacherDisciplineMaxOrderByAggregateInput
    _min?: TeacherDisciplineMinOrderByAggregateInput
    _sum?: TeacherDisciplineSumOrderByAggregateInput
  }

  export type TeacherDisciplineScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TeacherDisciplineScalarWhereWithAggregatesInput>
    OR?: Enumerable<TeacherDisciplineScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TeacherDisciplineScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    teacherId?: IntWithAggregatesFilter | number
    disciplineId?: IntWithAggregatesFilter | number
  }

  export type TestWhereInput = {
    AND?: Enumerable<TestWhereInput>
    OR?: Enumerable<TestWhereInput>
    NOT?: Enumerable<TestWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    pdfUrl?: StringFilter | string
    categoryId?: IntFilter | number
    teacherDisciplineId?: IntFilter | number
    Category?: XOR<CategoryRelationFilter, CategoryWhereInput>
    TeacherDiscipline?: XOR<TeacherDisciplineRelationFilter, TeacherDisciplineWhereInput>
  }

  export type TestOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    pdfUrl?: SortOrder
    categoryId?: SortOrder
    teacherDisciplineId?: SortOrder
    Category?: CategoryOrderByWithRelationInput
    TeacherDiscipline?: TeacherDisciplineOrderByWithRelationInput
  }

  export type TestWhereUniqueInput = {
    id?: number
  }

  export type TestOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    pdfUrl?: SortOrder
    categoryId?: SortOrder
    teacherDisciplineId?: SortOrder
    _count?: TestCountOrderByAggregateInput
    _avg?: TestAvgOrderByAggregateInput
    _max?: TestMaxOrderByAggregateInput
    _min?: TestMinOrderByAggregateInput
    _sum?: TestSumOrderByAggregateInput
  }

  export type TestScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TestScalarWhereWithAggregatesInput>
    OR?: Enumerable<TestScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TestScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    pdfUrl?: StringWithAggregatesFilter | string
    categoryId?: IntWithAggregatesFilter | number
    teacherDisciplineId?: IntWithAggregatesFilter | number
  }

  export type UserCreateInput = {
    email: string
    password: string
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    password: string
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    password: string
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryCreateInput = {
    name: string
    Test?: TestCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateInput = {
    id?: number
    name: string
    Test?: TestUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    Test?: TestUpdateManyWithoutCategoryInput
  }

  export type CategoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    Test?: TestUncheckedUpdateManyWithoutCategoryInput
  }

  export type CategoryCreateManyInput = {
    id?: number
    name: string
  }

  export type CategoryUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TermCreateInput = {
    teachers: teachersCreateNestedOneWithoutTermInput
  }

  export type TermUncheckedCreateInput = {
    id?: number
    teacherId: number
  }

  export type TermUpdateInput = {
    teachers?: teachersUpdateOneRequiredWithoutTermInput
  }

  export type TermUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    teacherId?: IntFieldUpdateOperationsInput | number
  }

  export type TermCreateManyInput = {
    id?: number
    teacherId: number
  }

  export type TermUpdateManyMutationInput = {

  }

  export type TermUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    teacherId?: IntFieldUpdateOperationsInput | number
  }

  export type DisciplineCreateInput = {
    name: string
    TeacherDiscipline?: TeacherDisciplineCreateNestedManyWithoutDisciplineInput
  }

  export type DisciplineUncheckedCreateInput = {
    id?: number
    name: string
    TeacherDiscipline?: TeacherDisciplineUncheckedCreateNestedManyWithoutDisciplineInput
  }

  export type DisciplineUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    TeacherDiscipline?: TeacherDisciplineUpdateManyWithoutDisciplineInput
  }

  export type DisciplineUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    TeacherDiscipline?: TeacherDisciplineUncheckedUpdateManyWithoutDisciplineInput
  }

  export type DisciplineCreateManyInput = {
    id?: number
    name: string
  }

  export type DisciplineUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type DisciplineUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type teachersCreateInput = {
    name: string
    Term?: TermCreateNestedManyWithoutTeachersInput
    TeacherDiscipline?: TeacherDisciplineCreateNestedManyWithoutTeachersInput
  }

  export type teachersUncheckedCreateInput = {
    id?: number
    name: string
    Term?: TermUncheckedCreateNestedManyWithoutTeachersInput
    TeacherDiscipline?: TeacherDisciplineUncheckedCreateNestedManyWithoutTeachersInput
  }

  export type teachersUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    Term?: TermUpdateManyWithoutTeachersInput
    TeacherDiscipline?: TeacherDisciplineUpdateManyWithoutTeachersInput
  }

  export type teachersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    Term?: TermUncheckedUpdateManyWithoutTeachersInput
    TeacherDiscipline?: TeacherDisciplineUncheckedUpdateManyWithoutTeachersInput
  }

  export type teachersCreateManyInput = {
    id?: number
    name: string
  }

  export type teachersUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type teachersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TeacherDisciplineCreateInput = {
    teachers: teachersCreateNestedOneWithoutTeacherDisciplineInput
    Discipline: DisciplineCreateNestedOneWithoutTeacherDisciplineInput
    Test?: TestCreateNestedManyWithoutTeacherDisciplineInput
  }

  export type TeacherDisciplineUncheckedCreateInput = {
    id?: number
    teacherId: number
    disciplineId: number
    Test?: TestUncheckedCreateNestedManyWithoutTeacherDisciplineInput
  }

  export type TeacherDisciplineUpdateInput = {
    teachers?: teachersUpdateOneRequiredWithoutTeacherDisciplineInput
    Discipline?: DisciplineUpdateOneRequiredWithoutTeacherDisciplineInput
    Test?: TestUpdateManyWithoutTeacherDisciplineInput
  }

  export type TeacherDisciplineUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    teacherId?: IntFieldUpdateOperationsInput | number
    disciplineId?: IntFieldUpdateOperationsInput | number
    Test?: TestUncheckedUpdateManyWithoutTeacherDisciplineInput
  }

  export type TeacherDisciplineCreateManyInput = {
    id?: number
    teacherId: number
    disciplineId: number
  }

  export type TeacherDisciplineUpdateManyMutationInput = {

  }

  export type TeacherDisciplineUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    teacherId?: IntFieldUpdateOperationsInput | number
    disciplineId?: IntFieldUpdateOperationsInput | number
  }

  export type TestCreateInput = {
    name: string
    pdfUrl: string
    Category: CategoryCreateNestedOneWithoutTestInput
    TeacherDiscipline: TeacherDisciplineCreateNestedOneWithoutTestInput
  }

  export type TestUncheckedCreateInput = {
    id?: number
    name: string
    pdfUrl: string
    categoryId: number
    teacherDisciplineId: number
  }

  export type TestUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    pdfUrl?: StringFieldUpdateOperationsInput | string
    Category?: CategoryUpdateOneRequiredWithoutTestInput
    TeacherDiscipline?: TeacherDisciplineUpdateOneRequiredWithoutTestInput
  }

  export type TestUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    pdfUrl?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    teacherDisciplineId?: IntFieldUpdateOperationsInput | number
  }

  export type TestCreateManyInput = {
    id?: number
    name: string
    pdfUrl: string
    categoryId: number
    teacherDisciplineId: number
  }

  export type TestUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    pdfUrl?: StringFieldUpdateOperationsInput | string
  }

  export type TestUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    pdfUrl?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    teacherDisciplineId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type TestListRelationFilter = {
    every?: TestWhereInput
    some?: TestWhereInput
    none?: TestWhereInput
  }

  export type TestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type CategoryAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type CategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type CategorySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TeachersRelationFilter = {
    is?: teachersWhereInput
    isNot?: teachersWhereInput
  }

  export type TermCountOrderByAggregateInput = {
    id?: SortOrder
    teacherId?: SortOrder
  }

  export type TermAvgOrderByAggregateInput = {
    id?: SortOrder
    teacherId?: SortOrder
  }

  export type TermMaxOrderByAggregateInput = {
    id?: SortOrder
    teacherId?: SortOrder
  }

  export type TermMinOrderByAggregateInput = {
    id?: SortOrder
    teacherId?: SortOrder
  }

  export type TermSumOrderByAggregateInput = {
    id?: SortOrder
    teacherId?: SortOrder
  }

  export type TeacherDisciplineListRelationFilter = {
    every?: TeacherDisciplineWhereInput
    some?: TeacherDisciplineWhereInput
    none?: TeacherDisciplineWhereInput
  }

  export type TeacherDisciplineOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DisciplineCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type DisciplineAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DisciplineMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type DisciplineMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type DisciplineSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TermListRelationFilter = {
    every?: TermWhereInput
    some?: TermWhereInput
    none?: TermWhereInput
  }

  export type TermOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type teachersCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type teachersAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type teachersMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type teachersMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type teachersSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DisciplineRelationFilter = {
    is?: DisciplineWhereInput
    isNot?: DisciplineWhereInput
  }

  export type TeacherDisciplineCountOrderByAggregateInput = {
    id?: SortOrder
    teacherId?: SortOrder
    disciplineId?: SortOrder
  }

  export type TeacherDisciplineAvgOrderByAggregateInput = {
    id?: SortOrder
    teacherId?: SortOrder
    disciplineId?: SortOrder
  }

  export type TeacherDisciplineMaxOrderByAggregateInput = {
    id?: SortOrder
    teacherId?: SortOrder
    disciplineId?: SortOrder
  }

  export type TeacherDisciplineMinOrderByAggregateInput = {
    id?: SortOrder
    teacherId?: SortOrder
    disciplineId?: SortOrder
  }

  export type TeacherDisciplineSumOrderByAggregateInput = {
    id?: SortOrder
    teacherId?: SortOrder
    disciplineId?: SortOrder
  }

  export type CategoryRelationFilter = {
    is?: CategoryWhereInput
    isNot?: CategoryWhereInput
  }

  export type TeacherDisciplineRelationFilter = {
    is?: TeacherDisciplineWhereInput
    isNot?: TeacherDisciplineWhereInput
  }

  export type TestCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    pdfUrl?: SortOrder
    categoryId?: SortOrder
    teacherDisciplineId?: SortOrder
  }

  export type TestAvgOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    teacherDisciplineId?: SortOrder
  }

  export type TestMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    pdfUrl?: SortOrder
    categoryId?: SortOrder
    teacherDisciplineId?: SortOrder
  }

  export type TestMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    pdfUrl?: SortOrder
    categoryId?: SortOrder
    teacherDisciplineId?: SortOrder
  }

  export type TestSumOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    teacherDisciplineId?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type TestCreateNestedManyWithoutCategoryInput = {
    create?: XOR<Enumerable<TestCreateWithoutCategoryInput>, Enumerable<TestUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<TestCreateOrConnectWithoutCategoryInput>
    createMany?: TestCreateManyCategoryInputEnvelope
    connect?: Enumerable<TestWhereUniqueInput>
  }

  export type TestUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<Enumerable<TestCreateWithoutCategoryInput>, Enumerable<TestUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<TestCreateOrConnectWithoutCategoryInput>
    createMany?: TestCreateManyCategoryInputEnvelope
    connect?: Enumerable<TestWhereUniqueInput>
  }

  export type TestUpdateManyWithoutCategoryInput = {
    create?: XOR<Enumerable<TestCreateWithoutCategoryInput>, Enumerable<TestUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<TestCreateOrConnectWithoutCategoryInput>
    upsert?: Enumerable<TestUpsertWithWhereUniqueWithoutCategoryInput>
    createMany?: TestCreateManyCategoryInputEnvelope
    set?: Enumerable<TestWhereUniqueInput>
    disconnect?: Enumerable<TestWhereUniqueInput>
    delete?: Enumerable<TestWhereUniqueInput>
    connect?: Enumerable<TestWhereUniqueInput>
    update?: Enumerable<TestUpdateWithWhereUniqueWithoutCategoryInput>
    updateMany?: Enumerable<TestUpdateManyWithWhereWithoutCategoryInput>
    deleteMany?: Enumerable<TestScalarWhereInput>
  }

  export type TestUncheckedUpdateManyWithoutCategoryInput = {
    create?: XOR<Enumerable<TestCreateWithoutCategoryInput>, Enumerable<TestUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<TestCreateOrConnectWithoutCategoryInput>
    upsert?: Enumerable<TestUpsertWithWhereUniqueWithoutCategoryInput>
    createMany?: TestCreateManyCategoryInputEnvelope
    set?: Enumerable<TestWhereUniqueInput>
    disconnect?: Enumerable<TestWhereUniqueInput>
    delete?: Enumerable<TestWhereUniqueInput>
    connect?: Enumerable<TestWhereUniqueInput>
    update?: Enumerable<TestUpdateWithWhereUniqueWithoutCategoryInput>
    updateMany?: Enumerable<TestUpdateManyWithWhereWithoutCategoryInput>
    deleteMany?: Enumerable<TestScalarWhereInput>
  }

  export type teachersCreateNestedOneWithoutTermInput = {
    create?: XOR<teachersCreateWithoutTermInput, teachersUncheckedCreateWithoutTermInput>
    connectOrCreate?: teachersCreateOrConnectWithoutTermInput
    connect?: teachersWhereUniqueInput
  }

  export type teachersUpdateOneRequiredWithoutTermInput = {
    create?: XOR<teachersCreateWithoutTermInput, teachersUncheckedCreateWithoutTermInput>
    connectOrCreate?: teachersCreateOrConnectWithoutTermInput
    upsert?: teachersUpsertWithoutTermInput
    connect?: teachersWhereUniqueInput
    update?: XOR<teachersUpdateWithoutTermInput, teachersUncheckedUpdateWithoutTermInput>
  }

  export type TeacherDisciplineCreateNestedManyWithoutDisciplineInput = {
    create?: XOR<Enumerable<TeacherDisciplineCreateWithoutDisciplineInput>, Enumerable<TeacherDisciplineUncheckedCreateWithoutDisciplineInput>>
    connectOrCreate?: Enumerable<TeacherDisciplineCreateOrConnectWithoutDisciplineInput>
    createMany?: TeacherDisciplineCreateManyDisciplineInputEnvelope
    connect?: Enumerable<TeacherDisciplineWhereUniqueInput>
  }

  export type TeacherDisciplineUncheckedCreateNestedManyWithoutDisciplineInput = {
    create?: XOR<Enumerable<TeacherDisciplineCreateWithoutDisciplineInput>, Enumerable<TeacherDisciplineUncheckedCreateWithoutDisciplineInput>>
    connectOrCreate?: Enumerable<TeacherDisciplineCreateOrConnectWithoutDisciplineInput>
    createMany?: TeacherDisciplineCreateManyDisciplineInputEnvelope
    connect?: Enumerable<TeacherDisciplineWhereUniqueInput>
  }

  export type TeacherDisciplineUpdateManyWithoutDisciplineInput = {
    create?: XOR<Enumerable<TeacherDisciplineCreateWithoutDisciplineInput>, Enumerable<TeacherDisciplineUncheckedCreateWithoutDisciplineInput>>
    connectOrCreate?: Enumerable<TeacherDisciplineCreateOrConnectWithoutDisciplineInput>
    upsert?: Enumerable<TeacherDisciplineUpsertWithWhereUniqueWithoutDisciplineInput>
    createMany?: TeacherDisciplineCreateManyDisciplineInputEnvelope
    set?: Enumerable<TeacherDisciplineWhereUniqueInput>
    disconnect?: Enumerable<TeacherDisciplineWhereUniqueInput>
    delete?: Enumerable<TeacherDisciplineWhereUniqueInput>
    connect?: Enumerable<TeacherDisciplineWhereUniqueInput>
    update?: Enumerable<TeacherDisciplineUpdateWithWhereUniqueWithoutDisciplineInput>
    updateMany?: Enumerable<TeacherDisciplineUpdateManyWithWhereWithoutDisciplineInput>
    deleteMany?: Enumerable<TeacherDisciplineScalarWhereInput>
  }

  export type TeacherDisciplineUncheckedUpdateManyWithoutDisciplineInput = {
    create?: XOR<Enumerable<TeacherDisciplineCreateWithoutDisciplineInput>, Enumerable<TeacherDisciplineUncheckedCreateWithoutDisciplineInput>>
    connectOrCreate?: Enumerable<TeacherDisciplineCreateOrConnectWithoutDisciplineInput>
    upsert?: Enumerable<TeacherDisciplineUpsertWithWhereUniqueWithoutDisciplineInput>
    createMany?: TeacherDisciplineCreateManyDisciplineInputEnvelope
    set?: Enumerable<TeacherDisciplineWhereUniqueInput>
    disconnect?: Enumerable<TeacherDisciplineWhereUniqueInput>
    delete?: Enumerable<TeacherDisciplineWhereUniqueInput>
    connect?: Enumerable<TeacherDisciplineWhereUniqueInput>
    update?: Enumerable<TeacherDisciplineUpdateWithWhereUniqueWithoutDisciplineInput>
    updateMany?: Enumerable<TeacherDisciplineUpdateManyWithWhereWithoutDisciplineInput>
    deleteMany?: Enumerable<TeacherDisciplineScalarWhereInput>
  }

  export type TermCreateNestedManyWithoutTeachersInput = {
    create?: XOR<Enumerable<TermCreateWithoutTeachersInput>, Enumerable<TermUncheckedCreateWithoutTeachersInput>>
    connectOrCreate?: Enumerable<TermCreateOrConnectWithoutTeachersInput>
    createMany?: TermCreateManyTeachersInputEnvelope
    connect?: Enumerable<TermWhereUniqueInput>
  }

  export type TeacherDisciplineCreateNestedManyWithoutTeachersInput = {
    create?: XOR<Enumerable<TeacherDisciplineCreateWithoutTeachersInput>, Enumerable<TeacherDisciplineUncheckedCreateWithoutTeachersInput>>
    connectOrCreate?: Enumerable<TeacherDisciplineCreateOrConnectWithoutTeachersInput>
    createMany?: TeacherDisciplineCreateManyTeachersInputEnvelope
    connect?: Enumerable<TeacherDisciplineWhereUniqueInput>
  }

  export type TermUncheckedCreateNestedManyWithoutTeachersInput = {
    create?: XOR<Enumerable<TermCreateWithoutTeachersInput>, Enumerable<TermUncheckedCreateWithoutTeachersInput>>
    connectOrCreate?: Enumerable<TermCreateOrConnectWithoutTeachersInput>
    createMany?: TermCreateManyTeachersInputEnvelope
    connect?: Enumerable<TermWhereUniqueInput>
  }

  export type TeacherDisciplineUncheckedCreateNestedManyWithoutTeachersInput = {
    create?: XOR<Enumerable<TeacherDisciplineCreateWithoutTeachersInput>, Enumerable<TeacherDisciplineUncheckedCreateWithoutTeachersInput>>
    connectOrCreate?: Enumerable<TeacherDisciplineCreateOrConnectWithoutTeachersInput>
    createMany?: TeacherDisciplineCreateManyTeachersInputEnvelope
    connect?: Enumerable<TeacherDisciplineWhereUniqueInput>
  }

  export type TermUpdateManyWithoutTeachersInput = {
    create?: XOR<Enumerable<TermCreateWithoutTeachersInput>, Enumerable<TermUncheckedCreateWithoutTeachersInput>>
    connectOrCreate?: Enumerable<TermCreateOrConnectWithoutTeachersInput>
    upsert?: Enumerable<TermUpsertWithWhereUniqueWithoutTeachersInput>
    createMany?: TermCreateManyTeachersInputEnvelope
    set?: Enumerable<TermWhereUniqueInput>
    disconnect?: Enumerable<TermWhereUniqueInput>
    delete?: Enumerable<TermWhereUniqueInput>
    connect?: Enumerable<TermWhereUniqueInput>
    update?: Enumerable<TermUpdateWithWhereUniqueWithoutTeachersInput>
    updateMany?: Enumerable<TermUpdateManyWithWhereWithoutTeachersInput>
    deleteMany?: Enumerable<TermScalarWhereInput>
  }

  export type TeacherDisciplineUpdateManyWithoutTeachersInput = {
    create?: XOR<Enumerable<TeacherDisciplineCreateWithoutTeachersInput>, Enumerable<TeacherDisciplineUncheckedCreateWithoutTeachersInput>>
    connectOrCreate?: Enumerable<TeacherDisciplineCreateOrConnectWithoutTeachersInput>
    upsert?: Enumerable<TeacherDisciplineUpsertWithWhereUniqueWithoutTeachersInput>
    createMany?: TeacherDisciplineCreateManyTeachersInputEnvelope
    set?: Enumerable<TeacherDisciplineWhereUniqueInput>
    disconnect?: Enumerable<TeacherDisciplineWhereUniqueInput>
    delete?: Enumerable<TeacherDisciplineWhereUniqueInput>
    connect?: Enumerable<TeacherDisciplineWhereUniqueInput>
    update?: Enumerable<TeacherDisciplineUpdateWithWhereUniqueWithoutTeachersInput>
    updateMany?: Enumerable<TeacherDisciplineUpdateManyWithWhereWithoutTeachersInput>
    deleteMany?: Enumerable<TeacherDisciplineScalarWhereInput>
  }

  export type TermUncheckedUpdateManyWithoutTeachersInput = {
    create?: XOR<Enumerable<TermCreateWithoutTeachersInput>, Enumerable<TermUncheckedCreateWithoutTeachersInput>>
    connectOrCreate?: Enumerable<TermCreateOrConnectWithoutTeachersInput>
    upsert?: Enumerable<TermUpsertWithWhereUniqueWithoutTeachersInput>
    createMany?: TermCreateManyTeachersInputEnvelope
    set?: Enumerable<TermWhereUniqueInput>
    disconnect?: Enumerable<TermWhereUniqueInput>
    delete?: Enumerable<TermWhereUniqueInput>
    connect?: Enumerable<TermWhereUniqueInput>
    update?: Enumerable<TermUpdateWithWhereUniqueWithoutTeachersInput>
    updateMany?: Enumerable<TermUpdateManyWithWhereWithoutTeachersInput>
    deleteMany?: Enumerable<TermScalarWhereInput>
  }

  export type TeacherDisciplineUncheckedUpdateManyWithoutTeachersInput = {
    create?: XOR<Enumerable<TeacherDisciplineCreateWithoutTeachersInput>, Enumerable<TeacherDisciplineUncheckedCreateWithoutTeachersInput>>
    connectOrCreate?: Enumerable<TeacherDisciplineCreateOrConnectWithoutTeachersInput>
    upsert?: Enumerable<TeacherDisciplineUpsertWithWhereUniqueWithoutTeachersInput>
    createMany?: TeacherDisciplineCreateManyTeachersInputEnvelope
    set?: Enumerable<TeacherDisciplineWhereUniqueInput>
    disconnect?: Enumerable<TeacherDisciplineWhereUniqueInput>
    delete?: Enumerable<TeacherDisciplineWhereUniqueInput>
    connect?: Enumerable<TeacherDisciplineWhereUniqueInput>
    update?: Enumerable<TeacherDisciplineUpdateWithWhereUniqueWithoutTeachersInput>
    updateMany?: Enumerable<TeacherDisciplineUpdateManyWithWhereWithoutTeachersInput>
    deleteMany?: Enumerable<TeacherDisciplineScalarWhereInput>
  }

  export type teachersCreateNestedOneWithoutTeacherDisciplineInput = {
    create?: XOR<teachersCreateWithoutTeacherDisciplineInput, teachersUncheckedCreateWithoutTeacherDisciplineInput>
    connectOrCreate?: teachersCreateOrConnectWithoutTeacherDisciplineInput
    connect?: teachersWhereUniqueInput
  }

  export type DisciplineCreateNestedOneWithoutTeacherDisciplineInput = {
    create?: XOR<DisciplineCreateWithoutTeacherDisciplineInput, DisciplineUncheckedCreateWithoutTeacherDisciplineInput>
    connectOrCreate?: DisciplineCreateOrConnectWithoutTeacherDisciplineInput
    connect?: DisciplineWhereUniqueInput
  }

  export type TestCreateNestedManyWithoutTeacherDisciplineInput = {
    create?: XOR<Enumerable<TestCreateWithoutTeacherDisciplineInput>, Enumerable<TestUncheckedCreateWithoutTeacherDisciplineInput>>
    connectOrCreate?: Enumerable<TestCreateOrConnectWithoutTeacherDisciplineInput>
    createMany?: TestCreateManyTeacherDisciplineInputEnvelope
    connect?: Enumerable<TestWhereUniqueInput>
  }

  export type TestUncheckedCreateNestedManyWithoutTeacherDisciplineInput = {
    create?: XOR<Enumerable<TestCreateWithoutTeacherDisciplineInput>, Enumerable<TestUncheckedCreateWithoutTeacherDisciplineInput>>
    connectOrCreate?: Enumerable<TestCreateOrConnectWithoutTeacherDisciplineInput>
    createMany?: TestCreateManyTeacherDisciplineInputEnvelope
    connect?: Enumerable<TestWhereUniqueInput>
  }

  export type teachersUpdateOneRequiredWithoutTeacherDisciplineInput = {
    create?: XOR<teachersCreateWithoutTeacherDisciplineInput, teachersUncheckedCreateWithoutTeacherDisciplineInput>
    connectOrCreate?: teachersCreateOrConnectWithoutTeacherDisciplineInput
    upsert?: teachersUpsertWithoutTeacherDisciplineInput
    connect?: teachersWhereUniqueInput
    update?: XOR<teachersUpdateWithoutTeacherDisciplineInput, teachersUncheckedUpdateWithoutTeacherDisciplineInput>
  }

  export type DisciplineUpdateOneRequiredWithoutTeacherDisciplineInput = {
    create?: XOR<DisciplineCreateWithoutTeacherDisciplineInput, DisciplineUncheckedCreateWithoutTeacherDisciplineInput>
    connectOrCreate?: DisciplineCreateOrConnectWithoutTeacherDisciplineInput
    upsert?: DisciplineUpsertWithoutTeacherDisciplineInput
    connect?: DisciplineWhereUniqueInput
    update?: XOR<DisciplineUpdateWithoutTeacherDisciplineInput, DisciplineUncheckedUpdateWithoutTeacherDisciplineInput>
  }

  export type TestUpdateManyWithoutTeacherDisciplineInput = {
    create?: XOR<Enumerable<TestCreateWithoutTeacherDisciplineInput>, Enumerable<TestUncheckedCreateWithoutTeacherDisciplineInput>>
    connectOrCreate?: Enumerable<TestCreateOrConnectWithoutTeacherDisciplineInput>
    upsert?: Enumerable<TestUpsertWithWhereUniqueWithoutTeacherDisciplineInput>
    createMany?: TestCreateManyTeacherDisciplineInputEnvelope
    set?: Enumerable<TestWhereUniqueInput>
    disconnect?: Enumerable<TestWhereUniqueInput>
    delete?: Enumerable<TestWhereUniqueInput>
    connect?: Enumerable<TestWhereUniqueInput>
    update?: Enumerable<TestUpdateWithWhereUniqueWithoutTeacherDisciplineInput>
    updateMany?: Enumerable<TestUpdateManyWithWhereWithoutTeacherDisciplineInput>
    deleteMany?: Enumerable<TestScalarWhereInput>
  }

  export type TestUncheckedUpdateManyWithoutTeacherDisciplineInput = {
    create?: XOR<Enumerable<TestCreateWithoutTeacherDisciplineInput>, Enumerable<TestUncheckedCreateWithoutTeacherDisciplineInput>>
    connectOrCreate?: Enumerable<TestCreateOrConnectWithoutTeacherDisciplineInput>
    upsert?: Enumerable<TestUpsertWithWhereUniqueWithoutTeacherDisciplineInput>
    createMany?: TestCreateManyTeacherDisciplineInputEnvelope
    set?: Enumerable<TestWhereUniqueInput>
    disconnect?: Enumerable<TestWhereUniqueInput>
    delete?: Enumerable<TestWhereUniqueInput>
    connect?: Enumerable<TestWhereUniqueInput>
    update?: Enumerable<TestUpdateWithWhereUniqueWithoutTeacherDisciplineInput>
    updateMany?: Enumerable<TestUpdateManyWithWhereWithoutTeacherDisciplineInput>
    deleteMany?: Enumerable<TestScalarWhereInput>
  }

  export type CategoryCreateNestedOneWithoutTestInput = {
    create?: XOR<CategoryCreateWithoutTestInput, CategoryUncheckedCreateWithoutTestInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutTestInput
    connect?: CategoryWhereUniqueInput
  }

  export type TeacherDisciplineCreateNestedOneWithoutTestInput = {
    create?: XOR<TeacherDisciplineCreateWithoutTestInput, TeacherDisciplineUncheckedCreateWithoutTestInput>
    connectOrCreate?: TeacherDisciplineCreateOrConnectWithoutTestInput
    connect?: TeacherDisciplineWhereUniqueInput
  }

  export type CategoryUpdateOneRequiredWithoutTestInput = {
    create?: XOR<CategoryCreateWithoutTestInput, CategoryUncheckedCreateWithoutTestInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutTestInput
    upsert?: CategoryUpsertWithoutTestInput
    connect?: CategoryWhereUniqueInput
    update?: XOR<CategoryUpdateWithoutTestInput, CategoryUncheckedUpdateWithoutTestInput>
  }

  export type TeacherDisciplineUpdateOneRequiredWithoutTestInput = {
    create?: XOR<TeacherDisciplineCreateWithoutTestInput, TeacherDisciplineUncheckedCreateWithoutTestInput>
    connectOrCreate?: TeacherDisciplineCreateOrConnectWithoutTestInput
    upsert?: TeacherDisciplineUpsertWithoutTestInput
    connect?: TeacherDisciplineWhereUniqueInput
    update?: XOR<TeacherDisciplineUpdateWithoutTestInput, TeacherDisciplineUncheckedUpdateWithoutTestInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type TestCreateWithoutCategoryInput = {
    name: string
    pdfUrl: string
    TeacherDiscipline: TeacherDisciplineCreateNestedOneWithoutTestInput
  }

  export type TestUncheckedCreateWithoutCategoryInput = {
    id?: number
    name: string
    pdfUrl: string
    teacherDisciplineId: number
  }

  export type TestCreateOrConnectWithoutCategoryInput = {
    where: TestWhereUniqueInput
    create: XOR<TestCreateWithoutCategoryInput, TestUncheckedCreateWithoutCategoryInput>
  }

  export type TestCreateManyCategoryInputEnvelope = {
    data: Enumerable<TestCreateManyCategoryInput>
    skipDuplicates?: boolean
  }

  export type TestUpsertWithWhereUniqueWithoutCategoryInput = {
    where: TestWhereUniqueInput
    update: XOR<TestUpdateWithoutCategoryInput, TestUncheckedUpdateWithoutCategoryInput>
    create: XOR<TestCreateWithoutCategoryInput, TestUncheckedCreateWithoutCategoryInput>
  }

  export type TestUpdateWithWhereUniqueWithoutCategoryInput = {
    where: TestWhereUniqueInput
    data: XOR<TestUpdateWithoutCategoryInput, TestUncheckedUpdateWithoutCategoryInput>
  }

  export type TestUpdateManyWithWhereWithoutCategoryInput = {
    where: TestScalarWhereInput
    data: XOR<TestUpdateManyMutationInput, TestUncheckedUpdateManyWithoutTestInput>
  }

  export type TestScalarWhereInput = {
    AND?: Enumerable<TestScalarWhereInput>
    OR?: Enumerable<TestScalarWhereInput>
    NOT?: Enumerable<TestScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    pdfUrl?: StringFilter | string
    categoryId?: IntFilter | number
    teacherDisciplineId?: IntFilter | number
  }

  export type teachersCreateWithoutTermInput = {
    name: string
    TeacherDiscipline?: TeacherDisciplineCreateNestedManyWithoutTeachersInput
  }

  export type teachersUncheckedCreateWithoutTermInput = {
    id?: number
    name: string
    TeacherDiscipline?: TeacherDisciplineUncheckedCreateNestedManyWithoutTeachersInput
  }

  export type teachersCreateOrConnectWithoutTermInput = {
    where: teachersWhereUniqueInput
    create: XOR<teachersCreateWithoutTermInput, teachersUncheckedCreateWithoutTermInput>
  }

  export type teachersUpsertWithoutTermInput = {
    update: XOR<teachersUpdateWithoutTermInput, teachersUncheckedUpdateWithoutTermInput>
    create: XOR<teachersCreateWithoutTermInput, teachersUncheckedCreateWithoutTermInput>
  }

  export type teachersUpdateWithoutTermInput = {
    name?: StringFieldUpdateOperationsInput | string
    TeacherDiscipline?: TeacherDisciplineUpdateManyWithoutTeachersInput
  }

  export type teachersUncheckedUpdateWithoutTermInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    TeacherDiscipline?: TeacherDisciplineUncheckedUpdateManyWithoutTeachersInput
  }

  export type TeacherDisciplineCreateWithoutDisciplineInput = {
    teachers: teachersCreateNestedOneWithoutTeacherDisciplineInput
    Test?: TestCreateNestedManyWithoutTeacherDisciplineInput
  }

  export type TeacherDisciplineUncheckedCreateWithoutDisciplineInput = {
    id?: number
    teacherId: number
    Test?: TestUncheckedCreateNestedManyWithoutTeacherDisciplineInput
  }

  export type TeacherDisciplineCreateOrConnectWithoutDisciplineInput = {
    where: TeacherDisciplineWhereUniqueInput
    create: XOR<TeacherDisciplineCreateWithoutDisciplineInput, TeacherDisciplineUncheckedCreateWithoutDisciplineInput>
  }

  export type TeacherDisciplineCreateManyDisciplineInputEnvelope = {
    data: Enumerable<TeacherDisciplineCreateManyDisciplineInput>
    skipDuplicates?: boolean
  }

  export type TeacherDisciplineUpsertWithWhereUniqueWithoutDisciplineInput = {
    where: TeacherDisciplineWhereUniqueInput
    update: XOR<TeacherDisciplineUpdateWithoutDisciplineInput, TeacherDisciplineUncheckedUpdateWithoutDisciplineInput>
    create: XOR<TeacherDisciplineCreateWithoutDisciplineInput, TeacherDisciplineUncheckedCreateWithoutDisciplineInput>
  }

  export type TeacherDisciplineUpdateWithWhereUniqueWithoutDisciplineInput = {
    where: TeacherDisciplineWhereUniqueInput
    data: XOR<TeacherDisciplineUpdateWithoutDisciplineInput, TeacherDisciplineUncheckedUpdateWithoutDisciplineInput>
  }

  export type TeacherDisciplineUpdateManyWithWhereWithoutDisciplineInput = {
    where: TeacherDisciplineScalarWhereInput
    data: XOR<TeacherDisciplineUpdateManyMutationInput, TeacherDisciplineUncheckedUpdateManyWithoutTeacherDisciplineInput>
  }

  export type TeacherDisciplineScalarWhereInput = {
    AND?: Enumerable<TeacherDisciplineScalarWhereInput>
    OR?: Enumerable<TeacherDisciplineScalarWhereInput>
    NOT?: Enumerable<TeacherDisciplineScalarWhereInput>
    id?: IntFilter | number
    teacherId?: IntFilter | number
    disciplineId?: IntFilter | number
  }

  export type TermCreateWithoutTeachersInput = {

  }

  export type TermUncheckedCreateWithoutTeachersInput = {
    id?: number
  }

  export type TermCreateOrConnectWithoutTeachersInput = {
    where: TermWhereUniqueInput
    create: XOR<TermCreateWithoutTeachersInput, TermUncheckedCreateWithoutTeachersInput>
  }

  export type TermCreateManyTeachersInputEnvelope = {
    data: Enumerable<TermCreateManyTeachersInput>
    skipDuplicates?: boolean
  }

  export type TeacherDisciplineCreateWithoutTeachersInput = {
    Discipline: DisciplineCreateNestedOneWithoutTeacherDisciplineInput
    Test?: TestCreateNestedManyWithoutTeacherDisciplineInput
  }

  export type TeacherDisciplineUncheckedCreateWithoutTeachersInput = {
    id?: number
    disciplineId: number
    Test?: TestUncheckedCreateNestedManyWithoutTeacherDisciplineInput
  }

  export type TeacherDisciplineCreateOrConnectWithoutTeachersInput = {
    where: TeacherDisciplineWhereUniqueInput
    create: XOR<TeacherDisciplineCreateWithoutTeachersInput, TeacherDisciplineUncheckedCreateWithoutTeachersInput>
  }

  export type TeacherDisciplineCreateManyTeachersInputEnvelope = {
    data: Enumerable<TeacherDisciplineCreateManyTeachersInput>
    skipDuplicates?: boolean
  }

  export type TermUpsertWithWhereUniqueWithoutTeachersInput = {
    where: TermWhereUniqueInput
    update: XOR<TermUpdateWithoutTeachersInput, TermUncheckedUpdateWithoutTeachersInput>
    create: XOR<TermCreateWithoutTeachersInput, TermUncheckedCreateWithoutTeachersInput>
  }

  export type TermUpdateWithWhereUniqueWithoutTeachersInput = {
    where: TermWhereUniqueInput
    data: XOR<TermUpdateWithoutTeachersInput, TermUncheckedUpdateWithoutTeachersInput>
  }

  export type TermUpdateManyWithWhereWithoutTeachersInput = {
    where: TermScalarWhereInput
    data: XOR<TermUpdateManyMutationInput, TermUncheckedUpdateManyWithoutTermInput>
  }

  export type TermScalarWhereInput = {
    AND?: Enumerable<TermScalarWhereInput>
    OR?: Enumerable<TermScalarWhereInput>
    NOT?: Enumerable<TermScalarWhereInput>
    id?: IntFilter | number
    teacherId?: IntFilter | number
  }

  export type TeacherDisciplineUpsertWithWhereUniqueWithoutTeachersInput = {
    where: TeacherDisciplineWhereUniqueInput
    update: XOR<TeacherDisciplineUpdateWithoutTeachersInput, TeacherDisciplineUncheckedUpdateWithoutTeachersInput>
    create: XOR<TeacherDisciplineCreateWithoutTeachersInput, TeacherDisciplineUncheckedCreateWithoutTeachersInput>
  }

  export type TeacherDisciplineUpdateWithWhereUniqueWithoutTeachersInput = {
    where: TeacherDisciplineWhereUniqueInput
    data: XOR<TeacherDisciplineUpdateWithoutTeachersInput, TeacherDisciplineUncheckedUpdateWithoutTeachersInput>
  }

  export type TeacherDisciplineUpdateManyWithWhereWithoutTeachersInput = {
    where: TeacherDisciplineScalarWhereInput
    data: XOR<TeacherDisciplineUpdateManyMutationInput, TeacherDisciplineUncheckedUpdateManyWithoutTeacherDisciplineInput>
  }

  export type teachersCreateWithoutTeacherDisciplineInput = {
    name: string
    Term?: TermCreateNestedManyWithoutTeachersInput
  }

  export type teachersUncheckedCreateWithoutTeacherDisciplineInput = {
    id?: number
    name: string
    Term?: TermUncheckedCreateNestedManyWithoutTeachersInput
  }

  export type teachersCreateOrConnectWithoutTeacherDisciplineInput = {
    where: teachersWhereUniqueInput
    create: XOR<teachersCreateWithoutTeacherDisciplineInput, teachersUncheckedCreateWithoutTeacherDisciplineInput>
  }

  export type DisciplineCreateWithoutTeacherDisciplineInput = {
    name: string
  }

  export type DisciplineUncheckedCreateWithoutTeacherDisciplineInput = {
    id?: number
    name: string
  }

  export type DisciplineCreateOrConnectWithoutTeacherDisciplineInput = {
    where: DisciplineWhereUniqueInput
    create: XOR<DisciplineCreateWithoutTeacherDisciplineInput, DisciplineUncheckedCreateWithoutTeacherDisciplineInput>
  }

  export type TestCreateWithoutTeacherDisciplineInput = {
    name: string
    pdfUrl: string
    Category: CategoryCreateNestedOneWithoutTestInput
  }

  export type TestUncheckedCreateWithoutTeacherDisciplineInput = {
    id?: number
    name: string
    pdfUrl: string
    categoryId: number
  }

  export type TestCreateOrConnectWithoutTeacherDisciplineInput = {
    where: TestWhereUniqueInput
    create: XOR<TestCreateWithoutTeacherDisciplineInput, TestUncheckedCreateWithoutTeacherDisciplineInput>
  }

  export type TestCreateManyTeacherDisciplineInputEnvelope = {
    data: Enumerable<TestCreateManyTeacherDisciplineInput>
    skipDuplicates?: boolean
  }

  export type teachersUpsertWithoutTeacherDisciplineInput = {
    update: XOR<teachersUpdateWithoutTeacherDisciplineInput, teachersUncheckedUpdateWithoutTeacherDisciplineInput>
    create: XOR<teachersCreateWithoutTeacherDisciplineInput, teachersUncheckedCreateWithoutTeacherDisciplineInput>
  }

  export type teachersUpdateWithoutTeacherDisciplineInput = {
    name?: StringFieldUpdateOperationsInput | string
    Term?: TermUpdateManyWithoutTeachersInput
  }

  export type teachersUncheckedUpdateWithoutTeacherDisciplineInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    Term?: TermUncheckedUpdateManyWithoutTeachersInput
  }

  export type DisciplineUpsertWithoutTeacherDisciplineInput = {
    update: XOR<DisciplineUpdateWithoutTeacherDisciplineInput, DisciplineUncheckedUpdateWithoutTeacherDisciplineInput>
    create: XOR<DisciplineCreateWithoutTeacherDisciplineInput, DisciplineUncheckedCreateWithoutTeacherDisciplineInput>
  }

  export type DisciplineUpdateWithoutTeacherDisciplineInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type DisciplineUncheckedUpdateWithoutTeacherDisciplineInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TestUpsertWithWhereUniqueWithoutTeacherDisciplineInput = {
    where: TestWhereUniqueInput
    update: XOR<TestUpdateWithoutTeacherDisciplineInput, TestUncheckedUpdateWithoutTeacherDisciplineInput>
    create: XOR<TestCreateWithoutTeacherDisciplineInput, TestUncheckedCreateWithoutTeacherDisciplineInput>
  }

  export type TestUpdateWithWhereUniqueWithoutTeacherDisciplineInput = {
    where: TestWhereUniqueInput
    data: XOR<TestUpdateWithoutTeacherDisciplineInput, TestUncheckedUpdateWithoutTeacherDisciplineInput>
  }

  export type TestUpdateManyWithWhereWithoutTeacherDisciplineInput = {
    where: TestScalarWhereInput
    data: XOR<TestUpdateManyMutationInput, TestUncheckedUpdateManyWithoutTestInput>
  }

  export type CategoryCreateWithoutTestInput = {
    name: string
  }

  export type CategoryUncheckedCreateWithoutTestInput = {
    id?: number
    name: string
  }

  export type CategoryCreateOrConnectWithoutTestInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutTestInput, CategoryUncheckedCreateWithoutTestInput>
  }

  export type TeacherDisciplineCreateWithoutTestInput = {
    teachers: teachersCreateNestedOneWithoutTeacherDisciplineInput
    Discipline: DisciplineCreateNestedOneWithoutTeacherDisciplineInput
  }

  export type TeacherDisciplineUncheckedCreateWithoutTestInput = {
    id?: number
    teacherId: number
    disciplineId: number
  }

  export type TeacherDisciplineCreateOrConnectWithoutTestInput = {
    where: TeacherDisciplineWhereUniqueInput
    create: XOR<TeacherDisciplineCreateWithoutTestInput, TeacherDisciplineUncheckedCreateWithoutTestInput>
  }

  export type CategoryUpsertWithoutTestInput = {
    update: XOR<CategoryUpdateWithoutTestInput, CategoryUncheckedUpdateWithoutTestInput>
    create: XOR<CategoryCreateWithoutTestInput, CategoryUncheckedCreateWithoutTestInput>
  }

  export type CategoryUpdateWithoutTestInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryUncheckedUpdateWithoutTestInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TeacherDisciplineUpsertWithoutTestInput = {
    update: XOR<TeacherDisciplineUpdateWithoutTestInput, TeacherDisciplineUncheckedUpdateWithoutTestInput>
    create: XOR<TeacherDisciplineCreateWithoutTestInput, TeacherDisciplineUncheckedCreateWithoutTestInput>
  }

  export type TeacherDisciplineUpdateWithoutTestInput = {
    teachers?: teachersUpdateOneRequiredWithoutTeacherDisciplineInput
    Discipline?: DisciplineUpdateOneRequiredWithoutTeacherDisciplineInput
  }

  export type TeacherDisciplineUncheckedUpdateWithoutTestInput = {
    id?: IntFieldUpdateOperationsInput | number
    teacherId?: IntFieldUpdateOperationsInput | number
    disciplineId?: IntFieldUpdateOperationsInput | number
  }

  export type TestCreateManyCategoryInput = {
    id?: number
    name: string
    pdfUrl: string
    teacherDisciplineId: number
  }

  export type TestUpdateWithoutCategoryInput = {
    name?: StringFieldUpdateOperationsInput | string
    pdfUrl?: StringFieldUpdateOperationsInput | string
    TeacherDiscipline?: TeacherDisciplineUpdateOneRequiredWithoutTestInput
  }

  export type TestUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    pdfUrl?: StringFieldUpdateOperationsInput | string
    teacherDisciplineId?: IntFieldUpdateOperationsInput | number
  }

  export type TestUncheckedUpdateManyWithoutTestInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    pdfUrl?: StringFieldUpdateOperationsInput | string
    teacherDisciplineId?: IntFieldUpdateOperationsInput | number
  }

  export type TeacherDisciplineCreateManyDisciplineInput = {
    id?: number
    teacherId: number
  }

  export type TeacherDisciplineUpdateWithoutDisciplineInput = {
    teachers?: teachersUpdateOneRequiredWithoutTeacherDisciplineInput
    Test?: TestUpdateManyWithoutTeacherDisciplineInput
  }

  export type TeacherDisciplineUncheckedUpdateWithoutDisciplineInput = {
    id?: IntFieldUpdateOperationsInput | number
    teacherId?: IntFieldUpdateOperationsInput | number
    Test?: TestUncheckedUpdateManyWithoutTeacherDisciplineInput
  }

  export type TeacherDisciplineUncheckedUpdateManyWithoutTeacherDisciplineInput = {
    id?: IntFieldUpdateOperationsInput | number
    teacherId?: IntFieldUpdateOperationsInput | number
  }

  export type TermCreateManyTeachersInput = {
    id?: number
  }

  export type TeacherDisciplineCreateManyTeachersInput = {
    id?: number
    disciplineId: number
  }

  export type TermUpdateWithoutTeachersInput = {

  }

  export type TermUncheckedUpdateWithoutTeachersInput = {
    id?: IntFieldUpdateOperationsInput | number
  }

  export type TermUncheckedUpdateManyWithoutTermInput = {
    id?: IntFieldUpdateOperationsInput | number
  }

  export type TeacherDisciplineUpdateWithoutTeachersInput = {
    Discipline?: DisciplineUpdateOneRequiredWithoutTeacherDisciplineInput
    Test?: TestUpdateManyWithoutTeacherDisciplineInput
  }

  export type TeacherDisciplineUncheckedUpdateWithoutTeachersInput = {
    id?: IntFieldUpdateOperationsInput | number
    disciplineId?: IntFieldUpdateOperationsInput | number
    Test?: TestUncheckedUpdateManyWithoutTeacherDisciplineInput
  }

  export type TestCreateManyTeacherDisciplineInput = {
    id?: number
    name: string
    pdfUrl: string
    categoryId: number
  }

  export type TestUpdateWithoutTeacherDisciplineInput = {
    name?: StringFieldUpdateOperationsInput | string
    pdfUrl?: StringFieldUpdateOperationsInput | string
    Category?: CategoryUpdateOneRequiredWithoutTestInput
  }

  export type TestUncheckedUpdateWithoutTeacherDisciplineInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    pdfUrl?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}